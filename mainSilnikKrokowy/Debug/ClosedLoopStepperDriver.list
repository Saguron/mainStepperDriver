
ClosedLoopStepperDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080095b0  080095b0  0000a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a8  080096a8  0000b060  2**0
                  CONTENTS
  4 .ARM          00000000  080096a8  080096a8  0000b060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096a8  080096a8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a8  080096a8  0000a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096ac  080096ac  0000a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080096b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed4  20000060  08009710  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f34  08009710  0000bf34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002635e  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c1  00000000  00000000  000313ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  000364b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019ff  00000000  00000000  00038670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024590  00000000  00000000  0003a06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002779e  00000000  00000000  0005e5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea525  00000000  00000000  00085d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001702c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009290  00000000  00000000  00170308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00179598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009598 	.word	0x08009598

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08009598 	.word	0x08009598

08000220 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08c      	sub	sp, #48	@ 0x30
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2220      	movs	r2, #32
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f009 f8c5 	bl	80093c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800023e:	4b32      	ldr	r3, [pc, #200]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000240:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000246:	4b30      	ldr	r3, [pc, #192]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000248:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800024c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800024e:	4b2e      	ldr	r3, [pc, #184]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000254:	4b2c      	ldr	r3, [pc, #176]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000256:	2200      	movs	r2, #0
 8000258:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800025a:	4b2b      	ldr	r3, [pc, #172]	@ (8000308 <MX_ADC1_Init+0xe8>)
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000260:	4b29      	ldr	r3, [pc, #164]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000266:	4b28      	ldr	r3, [pc, #160]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000268:	2204      	movs	r2, #4
 800026a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800026c:	4b26      	ldr	r3, [pc, #152]	@ (8000308 <MX_ADC1_Init+0xe8>)
 800026e:	2200      	movs	r2, #0
 8000270:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000272:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000274:	2200      	movs	r2, #0
 8000276:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000278:	4b23      	ldr	r3, [pc, #140]	@ (8000308 <MX_ADC1_Init+0xe8>)
 800027a:	2201      	movs	r2, #1
 800027c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027e:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000280:	2200      	movs	r2, #0
 8000282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000286:	4b20      	ldr	r3, [pc, #128]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000288:	2200      	movs	r2, #0
 800028a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <MX_ADC1_Init+0xe8>)
 800028e:	2200      	movs	r2, #0
 8000290:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000292:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <MX_ADC1_Init+0xe8>)
 8000294:	2200      	movs	r2, #0
 8000296:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800029a:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <MX_ADC1_Init+0xe8>)
 800029c:	2200      	movs	r2, #0
 800029e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80002a0:	4b19      	ldr	r3, [pc, #100]	@ (8000308 <MX_ADC1_Init+0xe8>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a8:	4817      	ldr	r0, [pc, #92]	@ (8000308 <MX_ADC1_Init+0xe8>)
 80002aa:	f001 facb 	bl	8001844 <HAL_ADC_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80002b4:	f000 fc44 	bl	8000b40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b8:	2300      	movs	r3, #0
 80002ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c0:	4619      	mov	r1, r3
 80002c2:	4811      	ldr	r0, [pc, #68]	@ (8000308 <MX_ADC1_Init+0xe8>)
 80002c4:	f002 f858 	bl	8002378 <HAL_ADCEx_MultiModeConfigChannel>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80002ce:	f000 fc37 	bl	8000b40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <MX_ADC1_Init+0xec>)
 80002d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d6:	2306      	movs	r3, #6
 80002d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002de:	237f      	movs	r3, #127	@ 0x7f
 80002e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002e2:	2304      	movs	r3, #4
 80002e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4806      	ldr	r0, [pc, #24]	@ (8000308 <MX_ADC1_Init+0xe8>)
 80002f0:	f001 fc2c 	bl	8001b4c <HAL_ADC_ConfigChannel>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002fa:	f000 fc21 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	3730      	adds	r7, #48	@ 0x30
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	2000007c 	.word	0x2000007c
 800030c:	3ef08000 	.word	0x3ef08000

08000310 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	@ 0x68
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	2244      	movs	r2, #68	@ 0x44
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f009 f849 	bl	80093c8 <memset>
  if(adcHandle->Instance==ADC1)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800033e:	d134      	bne.n	80003aa <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000344:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000346:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800034a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4618      	mov	r0, r3
 8000352:	f003 ff63 	bl	800421c <HAL_RCCEx_PeriphCLKConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800035c:	f000 fbf0 	bl	8000b40 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000360:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <HAL_ADC_MspInit+0xa4>)
 8000362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000364:	4a13      	ldr	r2, [pc, #76]	@ (80003b4 <HAL_ADC_MspInit+0xa4>)
 8000366:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800036a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <HAL_ADC_MspInit+0xa4>)
 800036e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <HAL_ADC_MspInit+0xa4>)
 800037a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <HAL_ADC_MspInit+0xa4>)
 800037e:	f043 0302 	orr.w	r3, r3, #2
 8000382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000384:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <HAL_ADC_MspInit+0xa4>)
 8000386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000388:	f003 0302 	and.w	r3, r3, #2
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = CURR_MEAS_Pin|TEMP_MEAS_Pin|GPIO_PIN_11;
 8000390:	f640 0303 	movw	r3, #2051	@ 0x803
 8000394:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000396:	2303      	movs	r3, #3
 8000398:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <HAL_ADC_MspInit+0xa8>)
 80003a6:	f002 fe6f 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003aa:	bf00      	nop
 80003ac:	3768      	adds	r7, #104	@ 0x68
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	48000400 	.word	0x48000400

080003bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003c0:	4a10      	ldr	r2, [pc, #64]	@ (8000404 <MX_FREERTOS_Init+0x48>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4810      	ldr	r0, [pc, #64]	@ (8000408 <MX_FREERTOS_Init+0x4c>)
 80003c6:	f006 fa9d 	bl	8006904 <osThreadNew>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a0f      	ldr	r2, [pc, #60]	@ (800040c <MX_FREERTOS_Init+0x50>)
 80003ce:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 80003d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000410 <MX_FREERTOS_Init+0x54>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	480f      	ldr	r0, [pc, #60]	@ (8000414 <MX_FREERTOS_Init+0x58>)
 80003d6:	f006 fa95 	bl	8006904 <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <MX_FREERTOS_Init+0x5c>)
 80003de:	6013      	str	r3, [r2, #0]

  /* creation of StepperRegTask */
  StepperRegTaskHandle = osThreadNew(StartStepperRegTask, NULL, &StepperRegTask_attributes);
 80003e0:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <MX_FREERTOS_Init+0x60>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	480e      	ldr	r0, [pc, #56]	@ (8000420 <MX_FREERTOS_Init+0x64>)
 80003e6:	f006 fa8d 	bl	8006904 <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <MX_FREERTOS_Init+0x68>)
 80003ee:	6013      	str	r3, [r2, #0]

  /* creation of FeedbackTask */
  FeedbackTaskHandle = osThreadNew(StartFeedbackTask, NULL, &FeedbackTask_attributes);
 80003f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <MX_FREERTOS_Init+0x6c>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	480d      	ldr	r0, [pc, #52]	@ (800042c <MX_FREERTOS_Init+0x70>)
 80003f6:	f006 fa85 	bl	8006904 <osThreadNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000430 <MX_FREERTOS_Init+0x74>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	08009600 	.word	0x08009600
 8000408:	08000435 	.word	0x08000435
 800040c:	200000e8 	.word	0x200000e8
 8000410:	08009624 	.word	0x08009624
 8000414:	08000445 	.word	0x08000445
 8000418:	200000ec 	.word	0x200000ec
 800041c:	08009648 	.word	0x08009648
 8000420:	08000455 	.word	0x08000455
 8000424:	200000f0 	.word	0x200000f0
 8000428:	0800966c 	.word	0x0800966c
 800042c:	08000465 	.word	0x08000465
 8000430:	200000f4 	.word	0x200000f4

08000434 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800043c:	2001      	movs	r0, #1
 800043e:	f006 faf3 	bl	8006a28 <osDelay>
 8000442:	e7fb      	b.n	800043c <StartDefaultTask+0x8>

08000444 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f006 faeb 	bl	8006a28 <osDelay>
 8000452:	e7fb      	b.n	800044c <StartEncoderTask+0x8>

08000454 <StartStepperRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStepperRegTask */
void StartStepperRegTask(void *argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStepperRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f006 fae3 	bl	8006a28 <osDelay>
 8000462:	e7fb      	b.n	800045c <StartStepperRegTask+0x8>

08000464 <StartFeedbackTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFeedbackTask */
void StartFeedbackTask(void *argument)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFeedbackTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800046c:	2001      	movs	r0, #1
 800046e:	f006 fadb 	bl	8006a28 <osDelay>
 8000472:	e7fb      	b.n	800046c <StartFeedbackTask+0x8>

08000474 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <MX_DMA_Init+0x50>)
 800047c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800047e:	4a11      	ldr	r2, [pc, #68]	@ (80004c4 <MX_DMA_Init+0x50>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	6493      	str	r3, [r2, #72]	@ 0x48
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <MX_DMA_Init+0x50>)
 8000488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <MX_DMA_Init+0x50>)
 8000494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000496:	4a0b      	ldr	r2, [pc, #44]	@ (80004c4 <MX_DMA_Init+0x50>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6493      	str	r3, [r2, #72]	@ 0x48
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <MX_DMA_Init+0x50>)
 80004a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2105      	movs	r1, #5
 80004ae:	200b      	movs	r0, #11
 80004b0:	f002 f8be 	bl	8002630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004b4:	200b      	movs	r0, #11
 80004b6:	f002 f8d5 	bl	8002664 <HAL_NVIC_EnableIRQ>

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004cc:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004ce:	4a20      	ldr	r2, [pc, #128]	@ (8000550 <MX_FDCAN1_Init+0x88>)
 80004d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004d2:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004d8:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004de:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80004e4:	4b19      	ldr	r3, [pc, #100]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80004ea:	4b18      	ldr	r3, [pc, #96]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004f0:	4b16      	ldr	r3, [pc, #88]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80004f6:	4b15      	ldr	r3, [pc, #84]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 12;
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <MX_FDCAN1_Init+0x84>)
 80004fe:	220c      	movs	r2, #12
 8000500:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 35;
 8000502:	4b12      	ldr	r3, [pc, #72]	@ (800054c <MX_FDCAN1_Init+0x84>)
 8000504:	2223      	movs	r2, #35	@ 0x23
 8000506:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 12;
 8000508:	4b10      	ldr	r3, [pc, #64]	@ (800054c <MX_FDCAN1_Init+0x84>)
 800050a:	220c      	movs	r2, #12
 800050c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_FDCAN1_Init+0x84>)
 8000510:	2201      	movs	r2, #1
 8000512:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000514:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <MX_FDCAN1_Init+0x84>)
 8000516:	2201      	movs	r2, #1
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_FDCAN1_Init+0x84>)
 800051c:	2205      	movs	r2, #5
 800051e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <MX_FDCAN1_Init+0x84>)
 8000522:	2204      	movs	r2, #4
 8000524:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_FDCAN1_Init+0x84>)
 8000528:	2200      	movs	r2, #0
 800052a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <MX_FDCAN1_Init+0x84>)
 800052e:	2201      	movs	r2, #1
 8000530:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_FDCAN1_Init+0x84>)
 8000534:	2200      	movs	r2, #0
 8000536:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <MX_FDCAN1_Init+0x84>)
 800053a:	f002 fa5b 	bl	80029f4 <HAL_FDCAN_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000544:	f000 fafc 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200000f8 	.word	0x200000f8
 8000550:	40006400 	.word	0x40006400

08000554 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b09a      	sub	sp, #104	@ 0x68
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2244      	movs	r2, #68	@ 0x44
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f008 ff27 	bl	80093c8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a24      	ldr	r2, [pc, #144]	@ (8000610 <HAL_FDCAN_MspInit+0xbc>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d141      	bne.n	8000608 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000588:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800058a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fe41 	bl	800421c <HAL_RCCEx_PeriphCLKConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80005a0:	f000 face 	bl	8000b40 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <HAL_FDCAN_MspInit+0xc0>)
 80005a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <HAL_FDCAN_MspInit+0xc0>)
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <HAL_FDCAN_MspInit+0xc0>)
 80005b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_FDCAN_MspInit+0xc0>)
 80005be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c0:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_FDCAN_MspInit+0xc0>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_FDCAN_MspInit+0xc0>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005d4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005d8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80005e6:	2309      	movs	r3, #9
 80005e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005ee:	4619      	mov	r1, r3
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f4:	f002 fd48 	bl	8003088 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2105      	movs	r1, #5
 80005fc:	2015      	movs	r0, #21
 80005fe:	f002 f817 	bl	8002630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000602:	2015      	movs	r0, #21
 8000604:	f002 f82e 	bl	8002664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000608:	bf00      	nop
 800060a:	3768      	adds	r7, #104	@ 0x68
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40006400 	.word	0x40006400
 8000614:	40021000 	.word	0x40021000

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	@ 0x28
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b62      	ldr	r3, [pc, #392]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a61      	ldr	r2, [pc, #388]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4b5f      	ldr	r3, [pc, #380]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000646:	4b5c      	ldr	r3, [pc, #368]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4a5b      	ldr	r2, [pc, #364]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 800064c:	f043 0320 	orr.w	r3, r3, #32
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4b59      	ldr	r3, [pc, #356]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0320 	and.w	r3, r3, #32
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	4b56      	ldr	r3, [pc, #344]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a55      	ldr	r2, [pc, #340]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4b53      	ldr	r3, [pc, #332]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b50      	ldr	r3, [pc, #320]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a4f      	ldr	r2, [pc, #316]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b4d      	ldr	r3, [pc, #308]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b4a      	ldr	r3, [pc, #296]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a49      	ldr	r2, [pc, #292]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b47      	ldr	r3, [pc, #284]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_OK_Pin|LED_FAULT_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80006ac:	4843      	ldr	r0, [pc, #268]	@ (80007bc <MX_GPIO_Init+0x1a4>)
 80006ae:	f002 fe6d 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_STEP_GPIO_Port, DRV_STEP_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b8:	4841      	ldr	r0, [pc, #260]	@ (80007c0 <MX_GPIO_Init+0x1a8>)
 80006ba:	f002 fe67 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_DIR_Pin|DRV_RESET_Pin|DRV_SLEEPn_Pin|DRV_CS_Pin
 80006be:	2200      	movs	r2, #0
 80006c0:	f240 411d 	movw	r1, #1053	@ 0x41d
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f002 fe60 	bl	800338c <HAL_GPIO_WritePin>
                          |CAN_SHDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	483c      	ldr	r0, [pc, #240]	@ (80007c4 <MX_GPIO_Init+0x1ac>)
 80006d4:	f002 fe5a 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROM_WP_GPIO_Port, ROM_WP_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006de:	4839      	ldr	r0, [pc, #228]	@ (80007c4 <MX_GPIO_Init+0x1ac>)
 80006e0:	f002 fe54 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_OK_Pin|LED_FAULT_Pin;
 80006e4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	482f      	ldr	r0, [pc, #188]	@ (80007bc <MX_GPIO_Init+0x1a4>)
 80006fe:	f002 fcc3 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_STEP_Pin;
 8000702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_STEP_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4829      	ldr	r0, [pc, #164]	@ (80007c0 <MX_GPIO_Init+0x1a8>)
 800071c:	f002 fcb4 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin|DRV_RESET_Pin|DRV_SLEEPn_Pin|DRV_CS_Pin
 8000720:	f240 431d 	movw	r3, #1053	@ 0x41d
 8000724:	617b      	str	r3, [r7, #20]
                          |CAN_SHDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073c:	f002 fca4 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DRV_STALLn_Pin|DRV_FAULTn_Pin;
 8000740:	2344      	movs	r3, #68	@ 0x44
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <MX_GPIO_Init+0x1ac>)
 8000754:	f002 fc98 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW1_Pin|SW2_Pin|END_SWITCH_1_Pin
 8000758:	f44f 63d6 	mov.w	r3, #1712	@ 0x6b0
 800075c:	617b      	str	r3, [r7, #20]
                          |END_SWITCH_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000762:	2301      	movs	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4815      	ldr	r0, [pc, #84]	@ (80007c4 <MX_GPIO_Init+0x1ac>)
 800076e:	f002 fc8b 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CS_Pin;
 8000772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENC_CS_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_GPIO_Init+0x1ac>)
 800078c:	f002 fc7c 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROM_WP_Pin;
 8000790:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROM_WP_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_GPIO_Init+0x1ac>)
 80007aa:	f002 fc6d 	bl	8003088 <HAL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	@ 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000800 	.word	0x48000800
 80007c0:	48001800 	.word	0x48001800
 80007c4:	48000400 	.word	0x48000400

080007c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_I2C2_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_I2C2_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00805C87;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_I2C2_Init+0x74>)
 80007d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <MX_I2C2_Init+0x7c>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_I2C2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_I2C2_Init+0x74>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000802:	480e      	ldr	r0, [pc, #56]	@ (800083c <MX_I2C2_Init+0x74>)
 8000804:	f002 fdda 	bl	80033bc <HAL_I2C_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800080e:	f000 f997 	bl	8000b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <MX_I2C2_Init+0x74>)
 8000816:	f002 fe6c 	bl	80034f2 <HAL_I2CEx_ConfigAnalogFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 f98e 	bl	8000b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_I2C2_Init+0x74>)
 8000828:	f002 feae 	bl	8003588 <HAL_I2CEx_ConfigDigitalFilter>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 f985 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000015c 	.word	0x2000015c
 8000840:	40005800 	.word	0x40005800
 8000844:	00805c87 	.word	0x00805c87

08000848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09a      	sub	sp, #104	@ 0x68
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2244      	movs	r2, #68	@ 0x44
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f008 fdad 	bl	80093c8 <memset>
  if(i2cHandle->Instance==I2C2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <HAL_I2C_MspInit+0xa8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d137      	bne.n	80008e8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fcc9 	bl	800421c <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000890:	f000 f956 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000898:	4a16      	ldr	r2, [pc, #88]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = ROM_SDA_Pin|ROM_SCL_Pin;
 80008ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008be:	2304      	movs	r3, #4
 80008c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008cc:	f002 fbdc 	bl	8003088 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	4a07      	ldr	r2, [pc, #28]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008da:	6593      	str	r3, [r2, #88]	@ 0x58
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008e8:	bf00      	nop
 80008ea:	3768      	adds	r7, #104	@ 0x68
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40005800 	.word	0x40005800
 80008f4:	40021000 	.word	0x40021000

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fd72 	bl	80013e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f8cd 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f7ff fe87 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 800090a:	f7ff fdb3 	bl	8000474 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800090e:	f7ff fddb 	bl	80004c8 <MX_FDCAN1_Init>
  MX_I2C2_Init();
 8000912:	f7ff ff59 	bl	80007c8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000916:	f000 f919 	bl	8000b4c <MX_SPI1_Init>
  MX_SPI2_Init();
 800091a:	f000 f955 	bl	8000bc8 <MX_SPI2_Init>
  MX_TIM8_Init();
 800091e:	f000 fbab 	bl	8001078 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000922:	f7ff fc7d 	bl	8000220 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000926:	f000 fb71 	bl	800100c <MX_TIM6_Init>
  MX_TIM2_Init();
 800092a:	f000 faf7 	bl	8000f1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);//start licznika sprzętowego tim2 generującego PWM na wejście STEP drivera
 800092e:	485a      	ldr	r0, [pc, #360]	@ (8000a98 <main+0x1a0>)
 8000930:	f004 fc60 	bl	80051f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000934:	2104      	movs	r1, #4
 8000936:	4858      	ldr	r0, [pc, #352]	@ (8000a98 <main+0x1a0>)
 8000938:	f004 fd28 	bl	800538c <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(DRV_SLEEPn_GPIO_Port, DRV_SLEEPn_Pin, GPIO_PIN_SET);//wyjście z trybu uśpienia
 800093c:	2201      	movs	r2, #1
 800093e:	2108      	movs	r1, #8
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f002 fd22 	bl	800338c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000948:	2001      	movs	r0, #1
 800094a:	f000 fd83 	bl	8001454 <HAL_Delay>
  HAL_GPIO_WritePin(DRV_RESET_GPIO_Port, DRV_RESET_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f002 fd19 	bl	800338c <HAL_GPIO_WritePin>
  HAL_Delay(600);
 800095a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800095e:	f000 fd79 	bl	8001454 <HAL_Delay>
  HAL_GPIO_WritePin(DRV_RESET_GPIO_Port, DRV_RESET_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096a:	f002 fd0f 	bl	800338c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DRV_DIR_GPIO_Port, DRV_DIR_Pin, GPIO_PIN_SET);  //kierunek obrotów
 800096e:	2201      	movs	r2, #1
 8000970:	2101      	movs	r1, #1
 8000972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000976:	f002 fd09 	bl	800338c <HAL_GPIO_WritePin>

	uint16_t spi_ctrl=0;
 800097a:	2300      	movs	r3, #0
 800097c:	82fb      	strh	r3, [r7, #22]
	uint8_t CTRLframe [2]={0,0};
 800097e:	2300      	movs	r3, #0
 8000980:	823b      	strh	r3, [r7, #16]

	spi_ctrl=(0<<15)|(CTRL<<12)|CTRL_in;
 8000982:	f640 4321 	movw	r3, #3105	@ 0xc21
 8000986:	82fb      	strh	r3, [r7, #22]
	CTRLframe[0]=spi_ctrl&0xFF;
 8000988:	8afb      	ldrh	r3, [r7, #22]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	743b      	strb	r3, [r7, #16]
	CTRLframe[1]=(spi_ctrl>>8)&0xFF;
 800098e:	8afb      	ldrh	r3, [r7, #22]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	b29b      	uxth	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	747b      	strb	r3, [r7, #17]

	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f002 fcf4 	bl	800338c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, CTRLframe, 2, HAL_MAX_DELAY);
 80009a4:	f107 0110 	add.w	r1, r7, #16
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	2202      	movs	r2, #2
 80009ae:	483b      	ldr	r0, [pc, #236]	@ (8000a9c <main+0x1a4>)
 80009b0:	f003 fecf 	bl	8004752 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009bc:	f002 fce6 	bl	800338c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_ctrl, 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
	  */


  	uint16_t spi_trq=0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	82bb      	strh	r3, [r7, #20]
    uint8_t TRQframe [2]={0,0};
 80009c4:	2300      	movs	r3, #0
 80009c6:	81bb      	strh	r3, [r7, #12]

  	spi_trq=(0<<15)|(TRQ<<12)|TRQ_in;
 80009c8:	f241 130a 	movw	r3, #4362	@ 0x110a
 80009cc:	82bb      	strh	r3, [r7, #20]
  	TRQframe[0]=spi_trq&0xFF;
 80009ce:	8abb      	ldrh	r3, [r7, #20]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	733b      	strb	r3, [r7, #12]
  	TRQframe[1]=(spi_trq>>8)&0xFF;
 80009d4:	8abb      	ldrh	r3, [r7, #20]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	737b      	strb	r3, [r7, #13]

  	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2110      	movs	r1, #16
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e6:	f002 fcd1 	bl	800338c <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(&hspi1, TRQframe, 2, HAL_MAX_DELAY);
 80009ea:	f107 010c 	add.w	r1, r7, #12
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	2202      	movs	r2, #2
 80009f4:	4829      	ldr	r0, [pc, #164]	@ (8000a9c <main+0x1a4>)
 80009f6:	f003 feac 	bl	8004752 <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2110      	movs	r1, #16
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f002 fcc3 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_SET);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_trq, 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
	*/

  	uint16_t spi_blank=0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	827b      	strh	r3, [r7, #18]
	uint8_t BLANKframe [2]={0,0};
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	813b      	strh	r3, [r7, #8]

	spi_blank=(0<<15)|(BLANK<<12)|BLANK_in;
 8000a0e:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 8000a12:	827b      	strh	r3, [r7, #18]
	BLANKframe[0]=spi_blank&0xFF;
 8000a14:	8a7b      	ldrh	r3, [r7, #18]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	723b      	strb	r3, [r7, #8]
	BLANKframe[1]=(spi_blank>>8)&0xFF;
 8000a1a:	8a7b      	ldrh	r3, [r7, #18]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2110      	movs	r1, #16
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2c:	f002 fcae 	bl	800338c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, BLANKframe, 2, HAL_MAX_DELAY);
 8000a30:	f107 0108 	add.w	r1, r7, #8
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	2202      	movs	r2, #2
 8000a3a:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <main+0x1a4>)
 8000a3c:	f003 fe89 	bl	8004752 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2110      	movs	r1, #16
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a48:	f002 fca0 	bl	800338c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_SET);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_blank, 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
	*/

  	uint16_t spi_status=(1<<15)|(STATUS<<12);
 8000a4c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a50:	80fb      	strh	r3, [r7, #6]
  	uint16_t get_status=0x00;
 8000a52:	2300      	movs	r3, #0
 8000a54:	80bb      	strh	r3, [r7, #4]

  	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2110      	movs	r1, #16
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5e:	f002 fc95 	bl	800338c <HAL_GPIO_WritePin>
  	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&spi_status, (uint8_t*)&get_status, 2, HAL_MAX_DELAY);
 8000a62:	1d3a      	adds	r2, r7, #4
 8000a64:	1db9      	adds	r1, r7, #6
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <main+0x1a4>)
 8000a70:	f003 ffe5 	bl	8004a3e <HAL_SPI_TransmitReceive>
  	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2110      	movs	r1, #16
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f002 fc86 	bl	800338c <HAL_GPIO_WritePin>
  	get_status=get_status&0xff;
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a88:	f005 fef2 	bl	8006870 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a8c:	f7ff fc96 	bl	80003bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a90:	f005 ff12 	bl	80068b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <main+0x19c>
 8000a98:	200002c4 	.word	0x200002c4
 8000a9c:	200001b0 	.word	0x200001b0

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	@ 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	2238      	movs	r2, #56	@ 0x38
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 fc8a 	bl	80093c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ac6:	f002 fdab 	bl	8003620 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ace:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fe53 	bl	8003788 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8000ae8:	f000 f82a 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000af0:	2302      	movs	r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f951 	bl	8003dac <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000b10:	f000 f816 	bl	8000b40 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	@ 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 fc73 	bl	8001418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40012c00 	.word	0x40012c00

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <MX_SPI1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b66:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b9a:	2207      	movs	r2, #7
 8000b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000bac:	f003 fd26 	bl	80045fc <HAL_SPI_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f7ff ffc3 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200001b0 	.word	0x200001b0
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000bce:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <MX_SPI2_Init+0x78>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000bdc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000be0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000be2:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000be4:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000be8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bfc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c00:	2210      	movs	r2, #16
 8000c02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_SPI2_Init+0x74>)
 8000c2a:	f003 fce7 	bl	80045fc <HAL_SPI_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000c34:	f7ff ff84 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000214 	.word	0x20000214
 8000c40:	40003800 	.word	0x40003800

08000c44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	@ 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a2f      	ldr	r2, [pc, #188]	@ (8000d20 <HAL_SPI_MspInit+0xdc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d129      	bne.n	8000cba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c66:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DRV_SCK_Pin|DRV_MISO_Pin|DRV_MOSI_Pin;
 8000c96:	23e0      	movs	r3, #224	@ 0xe0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f002 f9e8 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cb8:	e02d      	b.n	8000d16 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <HAL_SPI_MspInit+0xe4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d128      	bne.n	8000d16 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc8:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_SPI_MspInit+0xe0>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_SCK_Pin|ENC_MOSI_Pin;
 8000cf4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d06:	2305      	movs	r3, #5
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <HAL_SPI_MspInit+0xe8>)
 8000d12:	f002 f9b9 	bl	8003088 <HAL_GPIO_Init>
}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	@ 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40013000 	.word	0x40013000
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40003800 	.word	0x40003800
 8000d2c:	48000400 	.word	0x48000400

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_MspInit+0x50>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3a:	4a11      	ldr	r2, [pc, #68]	@ (8000d80 <HAL_MspInit+0x50>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x50>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x50>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <HAL_MspInit+0x50>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_MspInit+0x50>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	210f      	movs	r1, #15
 8000d6a:	f06f 0001 	mvn.w	r0, #1
 8000d6e:	f001 fc5f 	bl	8002630 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d72:	f002 fcf9 	bl	8003768 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	@ 0x30
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d94:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <HAL_InitTick+0xc4>)
 8000d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d98:	4a2b      	ldr	r2, [pc, #172]	@ (8000e48 <HAL_InitTick+0xc4>)
 8000d9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da0:	4b29      	ldr	r3, [pc, #164]	@ (8000e48 <HAL_InitTick+0xc4>)
 8000da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 f9b8 	bl	800412c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dbc:	f003 f9a0 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8000dc0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc4:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <HAL_InitTick+0xc8>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	0c9b      	lsrs	r3, r3, #18
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e50 <HAL_InitTick+0xcc>)
 8000dd2:	4a20      	ldr	r2, [pc, #128]	@ (8000e54 <HAL_InitTick+0xd0>)
 8000dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <HAL_InitTick+0xcc>)
 8000dd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ddc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dde:	4a1c      	ldr	r2, [pc, #112]	@ (8000e50 <HAL_InitTick+0xcc>)
 8000de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <HAL_InitTick+0xcc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_InitTick+0xcc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000df0:	4817      	ldr	r0, [pc, #92]	@ (8000e50 <HAL_InitTick+0xcc>)
 8000df2:	f004 f9a7 	bl	8005144 <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d11b      	bne.n	8000e3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e04:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <HAL_InitTick+0xcc>)
 8000e06:	f004 f9f5 	bl	80051f4 <HAL_TIM_Base_Start_IT>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d111      	bne.n	8000e3c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e18:	2019      	movs	r0, #25
 8000e1a:	f001 fc23 	bl	8002664 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d808      	bhi.n	8000e36 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	2019      	movs	r0, #25
 8000e2a:	f001 fc01 	bl	8002630 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <HAL_InitTick+0xd4>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	e002      	b.n	8000e3c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3730      	adds	r7, #48	@ 0x30
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	20000278 	.word	0x20000278
 8000e54:	40012c00 	.word	0x40012c00
 8000e58:	20000004 	.word	0x20000004

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4);
 8000e98:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <DMA1_Channel1_IRQHandler+0x10>)
 8000e9a:	f001 fc99 	bl	80027d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200003a8 	.word	0x200003a8

08000ea8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <FDCAN1_IT0_IRQHandler+0x10>)
 8000eae:	f001 fefb 	bl	8002ca8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000f8 	.word	0x200000f8

08000ebc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ec2:	f004 fb63 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000278 	.word	0x20000278

08000ed0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <TIM2_IRQHandler+0x10>)
 8000ed6:	f004 fb59 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200002c4 	.word	0x200002c4

08000ee4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <TIM6_DAC_IRQHandler+0x10>)
 8000eea:	f004 fb4f 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000310 	.word	0x20000310

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	@ 0x38
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8000f62:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f64:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000f68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f72:	2280      	movs	r2, #128	@ 0x80
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f76:	4824      	ldr	r0, [pc, #144]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f78:	f004 f8e4 	bl	8005144 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f82:	f7ff fddd 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f90:	4619      	mov	r1, r3
 8000f92:	481d      	ldr	r0, [pc, #116]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000f94:	f004 fd5e 	bl	8005a54 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f9e:	f7ff fdcf 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fa2:	4819      	ldr	r0, [pc, #100]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000fa4:	f004 f990 	bl	80052c8 <HAL_TIM_PWM_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000fae:	f7ff fdc7 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4811      	ldr	r0, [pc, #68]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000fc2:	f005 fabd 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fcc:	f7ff fdb8 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd0:	2360      	movs	r3, #96	@ 0x60
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 374;
 8000fd4:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4807      	ldr	r0, [pc, #28]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000fea:	f004 fc1f 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ff4:	f7ff fda4 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <MX_TIM2_Init+0xec>)
 8000ffa:	f000 f96f 	bl	80012dc <HAL_TIM_MspPostInit>

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	@ 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002c4 	.word	0x200002c4

0800100c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_TIM6_Init+0x64>)
 800101e:	4a15      	ldr	r2, [pc, #84]	@ (8001074 <MX_TIM6_Init+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <MX_TIM6_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_TIM6_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2399;
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_TIM6_Init+0x64>)
 8001030:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001034:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_TIM6_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <MX_TIM6_Init+0x64>)
 800103e:	f004 f881 	bl	8005144 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001048:	f7ff fd7a 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_TIM6_Init+0x64>)
 800105a:	f005 fa71 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001064:	f7ff fd6c 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000310 	.word	0x20000310
 8001074:	40001000 	.word	0x40001000

08001078 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b09c      	sub	sp, #112	@ 0x70
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2234      	movs	r2, #52	@ 0x34
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f008 f988 	bl	80093c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010b8:	4b45      	ldr	r3, [pc, #276]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010ba:	4a46      	ldr	r2, [pc, #280]	@ (80011d4 <MX_TIM8_Init+0x15c>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b42      	ldr	r3, [pc, #264]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 30;
 80010ca:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010cc:	221e      	movs	r2, #30
 80010ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b3f      	ldr	r3, [pc, #252]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010d6:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b3c      	ldr	r3, [pc, #240]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010e2:	483b      	ldr	r0, [pc, #236]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80010e4:	f004 f82e 	bl	8005144 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80010ee:	f7ff fd27 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010fc:	4619      	mov	r1, r3
 80010fe:	4834      	ldr	r0, [pc, #208]	@ (80011d0 <MX_TIM8_Init+0x158>)
 8001100:	f004 fca8 	bl	8005a54 <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800110a:	f7ff fd19 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800110e:	4830      	ldr	r0, [pc, #192]	@ (80011d0 <MX_TIM8_Init+0x158>)
 8001110:	f004 f8da 	bl	80052c8 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800111a:	f7ff fd11 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800112a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800112e:	4619      	mov	r1, r3
 8001130:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <MX_TIM8_Init+0x158>)
 8001132:	f005 fa05 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800113c:	f7ff fd00 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001140:	2360      	movs	r3, #96	@ 0x60
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001148:	2300      	movs	r3, #0
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800115c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001160:	220c      	movs	r2, #12
 8001162:	4619      	mov	r1, r3
 8001164:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <MX_TIM8_Init+0x158>)
 8001166:	f004 fb61 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001170:	f7ff fce6 	bl	8000b40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800119a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4807      	ldr	r0, [pc, #28]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80011b2:	f005 fa47 	bl	8006644 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80011bc:	f7ff fcc0 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <MX_TIM8_Init+0x158>)
 80011c2:	f000 f88b 	bl	80012dc <HAL_TIM_MspPostInit>

}
 80011c6:	bf00      	nop
 80011c8:	3770      	adds	r7, #112	@ 0x70
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000035c 	.word	0x2000035c
 80011d4:	40013400 	.word	0x40013400

080011d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011e8:	d114      	bne.n	8001214 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	4a36      	ldr	r2, [pc, #216]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	210a      	movs	r1, #10
 8001206:	201c      	movs	r0, #28
 8001208:	f001 fa12 	bl	8002630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800120c:	201c      	movs	r0, #28
 800120e:	f001 fa29 	bl	8002664 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001212:	e054      	b.n	80012be <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2c      	ldr	r2, [pc, #176]	@ (80012cc <HAL_TIM_Base_MspInit+0xf4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d114      	bne.n	8001248 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800121e:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	4a29      	ldr	r2, [pc, #164]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6593      	str	r3, [r2, #88]	@ 0x58
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	210f      	movs	r1, #15
 800123a:	2036      	movs	r0, #54	@ 0x36
 800123c:	f001 f9f8 	bl	8002630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001240:	2036      	movs	r0, #54	@ 0x36
 8001242:	f001 fa0f 	bl	8002664 <HAL_NVIC_EnableIRQ>
}
 8001246:	e03a      	b.n	80012be <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM8)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a20      	ldr	r2, [pc, #128]	@ (80012d0 <HAL_TIM_Base_MspInit+0xf8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d135      	bne.n	80012be <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 8001258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800125c:	6613      	str	r3, [r2, #96]	@ 0x60
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_TIM_Base_MspInit+0xf0>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch4.Instance = DMA1_Channel1;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 800126c:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <HAL_TIM_Base_MspInit+0x100>)
 800126e:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4.Init.Request = DMA_REQUEST_TIM8_CH4;
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 8001272:	2234      	movs	r2, #52	@ 0x34
 8001274:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 8001278:	2210      	movs	r2, #16
 800127a:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001282:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 800128a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800128e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4.Init.Mode = DMA_NORMAL;
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch4) != HAL_OK)
 80012a2:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 80012a4:	f001 f9ec 	bl	8002680 <HAL_DMA_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_TIM_Base_MspInit+0xda>
      Error_Handler();
 80012ae:	f7ff fc47 	bl	8000b40 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012b8:	4a06      	ldr	r2, [pc, #24]	@ (80012d4 <HAL_TIM_Base_MspInit+0xfc>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40001000 	.word	0x40001000
 80012d0:	40013400 	.word	0x40013400
 80012d4:	200003a8 	.word	0x200003a8
 80012d8:	40020008 	.word	0x40020008

080012dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012fc:	d11d      	bne.n	800133a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001316:	2302      	movs	r3, #2
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001326:	2301      	movs	r3, #1
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001334:	f001 fea8 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001338:	e021      	b.n	800137e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a13      	ldr	r2, [pc, #76]	@ (800138c <HAL_TIM_MspPostInit+0xb0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d11c      	bne.n	800137e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001348:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_WS_Pin;
 800135c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 800136e:	2306      	movs	r3, #6
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_WS_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	@ (8001390 <HAL_TIM_MspPostInit+0xb4>)
 800137a:	f001 fe85 	bl	8003088 <HAL_GPIO_Init>
}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	@ 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40013400 	.word	0x40013400
 8001390:	48000800 	.word	0x48000800

08001394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001396:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff fdae 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	@ (80013d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <LoopForever+0xe>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	@ (80013e0 <LoopForever+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f008 f85f 	bl	8009484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c6:	f7ff fa97 	bl	80008f8 <main>

080013ca <LoopForever>:

LoopForever:
    b LoopForever
 80013ca:	e7fe      	b.n	80013ca <LoopForever>
  ldr   r0, =_estack
 80013cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013d8:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 80013dc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013e0:	20001f34 	.word	0x20001f34

080013e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_2_IRQHandler>

080013e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f001 f912 	bl	800261a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f6:	200f      	movs	r0, #15
 80013f8:	f7ff fcc4 	bl	8000d84 <HAL_InitTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	e001      	b.n	800140c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001408:	f7ff fc92 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800140c:	79fb      	ldrb	r3, [r7, #7]

}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_IncTick+0x1c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x20>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4413      	add	r3, r2
 8001426:	4a03      	ldr	r2, [pc, #12]	@ (8001434 <HAL_IncTick+0x1c>)
 8001428:	6013      	str	r3, [r2, #0]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000408 	.word	0x20000408
 8001438:	20000008 	.word	0x20000008

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000408 	.word	0x20000408

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d004      	beq.n	8001478 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_Delay+0x40>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001478:	bf00      	nop
 800147a:	f7ff ffdf 	bl	800143c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	429a      	cmp	r2, r3
 8001488:	d8f7      	bhi.n	800147a <HAL_Delay+0x26>
  {
  }
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000008 	.word	0x20000008

08001498 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3360      	adds	r3, #96	@ 0x60
 8001512:	461a      	mov	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <LL_ADC_SetOffset+0x44>)
 8001522:	4013      	ands	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	4313      	orrs	r3, r2
 8001530:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	03fff000 	.word	0x03fff000

08001548 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3360      	adds	r3, #96	@ 0x60
 8001556:	461a      	mov	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3360      	adds	r3, #96	@ 0x60
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b087      	sub	sp, #28
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3360      	adds	r3, #96	@ 0x60
 80015ba:	461a      	mov	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015d4:	bf00      	nop
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3360      	adds	r3, #96	@ 0x60
 80015f0:	461a      	mov	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3330      	adds	r3, #48	@ 0x30
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	4413      	add	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	211f      	movs	r1, #31
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0e9b      	lsrs	r3, r3, #26
 8001674:	f003 011f 	and.w	r1, r3, #31
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3314      	adds	r3, #20
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	0e5b      	lsrs	r3, r3, #25
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0d1b      	lsrs	r3, r3, #20
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	2107      	movs	r1, #7
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0318 	and.w	r3, r3, #24
 800170e:	4908      	ldr	r1, [pc, #32]	@ (8001730 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001710:	40d9      	lsrs	r1, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	400b      	ands	r3, r1
 8001716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171a:	431a      	orrs	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	0007ffff 	.word	0x0007ffff

08001734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6093      	str	r3, [r2, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001794:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_IsEnabled+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_IsEnabled+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b04      	cmp	r3, #4
 8001808:	d101      	bne.n	800180e <LL_ADC_REG_IsConversionOngoing+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b08      	cmp	r3, #8
 800182e:	d101      	bne.n	8001834 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e167      	b.n	8001b2e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7fe fd4f 	bl	8000310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff67 	bl	8001758 <LL_ADC_IsDeepPowerDownEnabled>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff4d 	bl	8001734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff82 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff66 	bl	8001780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001b38 <HAL_ADC_Init+0x2f4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	4aa0      	ldr	r2, [pc, #640]	@ (8001b3c <HAL_ADC_Init+0x2f8>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	3301      	adds	r3, #1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff64 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff75 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 800190c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8100 	bne.w	8001b1c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 80fc 	bne.w	8001b1c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001928:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800192c:	f043 0202 	orr.w	r2, r3, #2
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff49 	bl	80017d0 <LL_ADC_IsEnabled>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d111      	bne.n	8001968 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001944:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001948:	f7ff ff42 	bl	80017d0 <LL_ADC_IsEnabled>
 800194c:	4604      	mov	r4, r0
 800194e:	487c      	ldr	r0, [pc, #496]	@ (8001b40 <HAL_ADC_Init+0x2fc>)
 8001950:	f7ff ff3e 	bl	80017d0 <LL_ADC_IsEnabled>
 8001954:	4603      	mov	r3, r0
 8001956:	4323      	orrs	r3, r4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4619      	mov	r1, r3
 8001962:	4878      	ldr	r0, [pc, #480]	@ (8001b44 <HAL_ADC_Init+0x300>)
 8001964:	f7ff fd98 	bl	8001498 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7f5b      	ldrb	r3, [r3, #29]
 800196c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001972:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001978:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800197e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001986:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001992:	2b01      	cmp	r3, #1
 8001994:	d106      	bne.n	80019a4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	3b01      	subs	r3, #1
 800199c:	045b      	lsls	r3, r3, #17
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d009      	beq.n	80019c0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	4b60      	ldr	r3, [pc, #384]	@ (8001b48 <HAL_ADC_Init+0x304>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff14 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 80019f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d16d      	bne.n	8001ad8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d16a      	bne.n	8001ad8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a0e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a1e:	f023 0302 	bic.w	r3, r3, #2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d017      	beq.n	8001a64 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6911      	ldr	r1, [r2, #16]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a62:	e013      	b.n	8001a8c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d118      	bne.n	8001ac8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	e007      	b.n	8001ad8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10c      	bne.n	8001afa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f023 010f 	bic.w	r1, r3, #15
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	1e5a      	subs	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 020f 	bic.w	r2, r2, #15
 8001b08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b1a:	e007      	b.n	8001b2c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b20:	f043 0210 	orr.w	r2, r3, #16
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	053e2d63 	.word	0x053e2d63
 8001b40:	50000100 	.word	0x50000100
 8001b44:	50000300 	.word	0x50000300
 8001b48:	fff04007 	.word	0xfff04007

08001b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0b6      	sub	sp, #216	@ 0xd8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x22>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e3c8      	b.n	8002300 <HAL_ADC_ConfigChannel+0x7b4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe3b 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 83ad 	bne.w	80022e2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f7ff fd51 	bl	800163c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe29 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001ba4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe35 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 8001bb2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 81d9 	bne.w	8001f72 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 81d4 	bne.w	8001f72 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff fd58 	bl	8001694 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fd12 	bl	8001616 <LL_ADC_SetSamplingTimeCommonConfig>
 8001bf2:	e00e      	b.n	8001c12 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	461a      	mov	r2, r3
 8001c02:	f7ff fd47 	bl	8001694 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fd02 	bl	8001616 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d022      	beq.n	8001c7a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6919      	ldr	r1, [r3, #16]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c44:	f7ff fc5c 	bl	8001500 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6919      	ldr	r1, [r3, #16]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	461a      	mov	r2, r3
 8001c56:	f7ff fca8 	bl	80015aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x124>
 8001c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c6e:	e000      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x126>
 8001c70:	2300      	movs	r3, #0
 8001c72:	461a      	mov	r2, r3
 8001c74:	f7ff fcb4 	bl	80015e0 <LL_ADC_SetOffsetSaturation>
 8001c78:	e17b      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fc61 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x15a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fc56 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	e01e      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x198>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fc4b 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1b0>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0e9b      	lsrs	r3, r3, #26
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	e018      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1e2>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	e004      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001d24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d106      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fc1a 	bl	8001574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fbfe 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10a      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x220>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fbf3 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	0e9b      	lsrs	r3, r3, #26
 8001d66:	f003 021f 	and.w	r2, r3, #31
 8001d6a:	e01e      	b.n	8001daa <HAL_ADC_ConfigChannel+0x25e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fbe8 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e004      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x276>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0e9b      	lsrs	r3, r3, #26
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	e018      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x2a8>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e004      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fbb7 	bl	8001574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fb9b 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x2e6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2102      	movs	r1, #2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fb90 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	0e9b      	lsrs	r3, r3, #26
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	e01e      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x324>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2102      	movs	r1, #2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fb85 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e004      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x33c>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	e016      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x36a>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	e004      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d106      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb56 	bl	8001574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2103      	movs	r1, #3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fb3a 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x3a8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2103      	movs	r1, #3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fb2f 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	f003 021f 	and.w	r2, r3, #31
 8001ef2:	e017      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x3d8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2103      	movs	r1, #3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb24 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f0e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001f10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e003      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x3f0>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	e011      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x414>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d106      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fb01 	bl	8001574 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fc2a 	bl	80017d0 <LL_ADC_IsEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 8140 	bne.w	8002204 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f7ff fbab 	bl	80016ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4a8f      	ldr	r2, [pc, #572]	@ (80021d8 <HAL_ADC_ConfigChannel+0x68c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	f040 8131 	bne.w	8002204 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10b      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x47e>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0e9b      	lsrs	r3, r3, #26
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2b09      	cmp	r3, #9
 8001fc0:	bf94      	ite	ls
 8001fc2:	2301      	movls	r3, #1
 8001fc4:	2300      	movhi	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	e019      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x4b2>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001fd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fda:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001fdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	e003      	b.n	8001fee <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d079      	beq.n	80020f6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <HAL_ADC_ConfigChannel+0x4d2>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	3301      	adds	r3, #1
 8002016:	069b      	lsls	r3, r3, #26
 8002018:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800201c:	e015      	b.n	800204a <HAL_ADC_ConfigChannel+0x4fe>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800202c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800202e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3301      	adds	r3, #1
 8002044:	069b      	lsls	r3, r3, #26
 8002046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_ADC_ConfigChannel+0x51e>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	3301      	adds	r3, #1
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	e017      	b.n	800209a <HAL_ADC_ConfigChannel+0x54e>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800207c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	ea42 0103 	orr.w	r1, r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10a      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x574>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	3301      	adds	r3, #1
 80020b2:	f003 021f 	and.w	r2, r3, #31
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	e018      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x5a6>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80020ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80020d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80020dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f2:	430b      	orrs	r3, r1
 80020f4:	e081      	b.n	80021fa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x5c6>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	3301      	adds	r3, #1
 800210a:	069b      	lsls	r3, r3, #26
 800210c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002110:	e015      	b.n	800213e <HAL_ADC_ConfigChannel+0x5f2>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e003      	b.n	8002136 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800212e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	069b      	lsls	r3, r3, #26
 800213a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_ADC_ConfigChannel+0x612>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	e017      	b.n	800218e <HAL_ADC_ConfigChannel+0x642>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	61fb      	str	r3, [r7, #28]
  return result;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002176:	2320      	movs	r3, #32
 8002178:	e003      	b.n	8002182 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	ea42 0103 	orr.w	r1, r2, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x66e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	051b      	lsls	r3, r3, #20
 80021b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021b8:	e01e      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x6ac>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	613b      	str	r3, [r7, #16]
  return result;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d104      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80021d2:	2320      	movs	r3, #32
 80021d4:	e006      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x698>
 80021d6:	bf00      	nop
 80021d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f003 021f 	and.w	r2, r3, #31
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	3b1e      	subs	r3, #30
 80021f2:	051b      	lsls	r3, r3, #20
 80021f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fe:	4619      	mov	r1, r3
 8002200:	f7ff fa48 	bl	8001694 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b3f      	ldr	r3, [pc, #252]	@ (8002308 <HAL_ADC_ConfigChannel+0x7bc>)
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d071      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002210:	483e      	ldr	r0, [pc, #248]	@ (800230c <HAL_ADC_ConfigChannel+0x7c0>)
 8002212:	f7ff f967 	bl	80014e4 <LL_ADC_GetCommonPathInternalCh>
 8002216:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HAL_ADC_ConfigChannel+0x7c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <HAL_ADC_ConfigChannel+0x6e2>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3a      	ldr	r2, [pc, #232]	@ (8002314 <HAL_ADC_ConfigChannel+0x7c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d127      	bne.n	800227e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800222e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d121      	bne.n	800227e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002242:	d157      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002248:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800224c:	4619      	mov	r1, r3
 800224e:	482f      	ldr	r0, [pc, #188]	@ (800230c <HAL_ADC_ConfigChannel+0x7c0>)
 8002250:	f7ff f935 	bl	80014be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <HAL_ADC_ConfigChannel+0x7cc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	4a30      	ldr	r2, [pc, #192]	@ (800231c <HAL_ADC_ConfigChannel+0x7d0>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800226e:	e002      	b.n	8002276 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3b01      	subs	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227c:	e03a      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_ADC_ConfigChannel+0x7d4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d113      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800228c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <HAL_ADC_ConfigChannel+0x7d8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02a      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800229e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	4619      	mov	r1, r3
 80022a8:	4818      	ldr	r0, [pc, #96]	@ (800230c <HAL_ADC_ConfigChannel+0x7c0>)
 80022aa:	f7ff f908 	bl	80014be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ae:	e021      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_ADC_ConfigChannel+0x7dc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d11c      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d116      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a16      	ldr	r2, [pc, #88]	@ (8002324 <HAL_ADC_ConfigChannel+0x7d8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d011      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022d8:	4619      	mov	r1, r3
 80022da:	480c      	ldr	r0, [pc, #48]	@ (800230c <HAL_ADC_ConfigChannel+0x7c0>)
 80022dc:	f7ff f8ef 	bl	80014be <LL_ADC_SetCommonPathInternalCh>
 80022e0:	e008      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	f043 0220 	orr.w	r2, r3, #32
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002300:	4618      	mov	r0, r3
 8002302:	37d8      	adds	r7, #216	@ 0xd8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	80080000 	.word	0x80080000
 800230c:	50000300 	.word	0x50000300
 8002310:	c3210000 	.word	0xc3210000
 8002314:	90c00010 	.word	0x90c00010
 8002318:	20000000 	.word	0x20000000
 800231c:	053e2d63 	.word	0x053e2d63
 8002320:	c7520000 	.word	0xc7520000
 8002324:	50000100 	.word	0x50000100
 8002328:	cb840000 	.word	0xcb840000

0800232c <LL_ADC_IsEnabled>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <LL_ADC_IsEnabled+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_IsEnabled+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_REG_IsConversionOngoing>:
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b04      	cmp	r3, #4
 8002364:	d101      	bne.n	800236a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b0a1      	sub	sp, #132	@ 0x84
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002392:	2302      	movs	r3, #2
 8002394:	e08b      	b.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800239e:	2300      	movs	r3, #0
 80023a0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80023a2:	2300      	movs	r3, #0
 80023a4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ae:	d102      	bne.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	e001      	b.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e06a      	b.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ffb9 	bl	8002352 <LL_ADC_REG_IsConversionOngoing>
 80023e0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ffb3 	bl	8002352 <LL_ADC_REG_IsConversionOngoing>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d14c      	bne.n	800248c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80023f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d149      	bne.n	800248c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023f8:	4b30      	ldr	r3, [pc, #192]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80023fa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d028      	beq.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002416:	035b      	lsls	r3, r3, #13
 8002418:	430b      	orrs	r3, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800241e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002420:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002424:	f7ff ff82 	bl	800232c <LL_ADC_IsEnabled>
 8002428:	4604      	mov	r4, r0
 800242a:	4823      	ldr	r0, [pc, #140]	@ (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800242c:	f7ff ff7e 	bl	800232c <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	4323      	orrs	r3, r4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d133      	bne.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002440:	f023 030f 	bic.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	6811      	ldr	r1, [r2, #0]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6892      	ldr	r2, [r2, #8]
 800244c:	430a      	orrs	r2, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002452:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002454:	e024      	b.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800245e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002460:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002462:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002466:	f7ff ff61 	bl	800232c <LL_ADC_IsEnabled>
 800246a:	4604      	mov	r4, r0
 800246c:	4812      	ldr	r0, [pc, #72]	@ (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800246e:	f7ff ff5d 	bl	800232c <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	4323      	orrs	r3, r4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d112      	bne.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800247a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002482:	f023 030f 	bic.w	r3, r3, #15
 8002486:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002488:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800248a:	e009      	b.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800249e:	e000      	b.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3784      	adds	r7, #132	@ 0x84
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}
 80024b6:	bf00      	nop
 80024b8:	50000100 	.word	0x50000100
 80024bc:	50000300 	.word	0x50000300

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	@ (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	@ (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	@ (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	@ 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff4c 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800263e:	f7ff ff63 	bl	8002508 <__NVIC_GetPriorityGrouping>
 8002642:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	6978      	ldr	r0, [r7, #20]
 800264a:	f7ff ffb3 	bl	80025b4 <NVIC_EncodePriority>
 800264e:	4602      	mov	r2, r0
 8002650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff82 	bl	8002560 <__NVIC_SetPriority>
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff56 	bl	8002524 <__NVIC_EnableIRQ>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e08d      	b.n	80027ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_DMA_Init+0x138>)
 800269a:	429a      	cmp	r2, r3
 800269c:	d80f      	bhi.n	80026be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b45      	ldr	r3, [pc, #276]	@ (80027bc <HAL_DMA_Init+0x13c>)
 80026a6:	4413      	add	r3, r2
 80026a8:	4a45      	ldr	r2, [pc, #276]	@ (80027c0 <HAL_DMA_Init+0x140>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a42      	ldr	r2, [pc, #264]	@ (80027c4 <HAL_DMA_Init+0x144>)
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80026bc:	e00e      	b.n	80026dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <HAL_DMA_Init+0x148>)
 80026c6:	4413      	add	r3, r2
 80026c8:	4a3d      	ldr	r2, [pc, #244]	@ (80027c0 <HAL_DMA_Init+0x140>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	009a      	lsls	r2, r3, #2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a3c      	ldr	r2, [pc, #240]	@ (80027cc <HAL_DMA_Init+0x14c>)
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8fe 	bl	8002930 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800273c:	d102      	bne.n	8002744 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002758:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_DMA_Init+0x104>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d80c      	bhi.n	8002784 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f91e 	bl	80029ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	e008      	b.n	8002796 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40020407 	.word	0x40020407
 80027bc:	bffdfff8 	.word	0xbffdfff8
 80027c0:	cccccccd 	.word	0xcccccccd
 80027c4:	40020000 	.word	0x40020000
 80027c8:	bffdfbf8 	.word	0xbffdfbf8
 80027cc:	40020400 	.word	0x40020400

080027d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2204      	movs	r2, #4
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d026      	beq.n	800284a <HAL_DMA_IRQHandler+0x7a>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d021      	beq.n	800284a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0204 	bic.w	r2, r2, #4
 8002822:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	2104      	movs	r1, #4
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	2b00      	cmp	r3, #0
 800283e:	d071      	beq.n	8002924 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002848:	e06c      	b.n	8002924 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2202      	movs	r2, #2
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d02e      	beq.n	80028bc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d029      	beq.n	80028bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10b      	bne.n	800288e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 020a 	bic.w	r2, r2, #10
 8002884:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f003 021f 	and.w	r2, r3, #31
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	2102      	movs	r1, #2
 800289c:	fa01 f202 	lsl.w	r2, r1, r2
 80028a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d038      	beq.n	8002924 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028ba:	e033      	b.n	8002924 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2208      	movs	r2, #8
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02a      	beq.n	8002926 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d025      	beq.n	8002926 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 020e 	bic.w	r2, r2, #14
 80028e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f003 021f 	and.w	r2, r3, #31
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002924:	bf00      	nop
 8002926:	bf00      	nop
}
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002940:	429a      	cmp	r2, r3
 8002942:	d802      	bhi.n	800294a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002944:	4b15      	ldr	r3, [pc, #84]	@ (800299c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e001      	b.n	800294e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800294c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3b08      	subs	r3, #8
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	009a      	lsls	r2, r3, #2
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0b      	ldr	r2, [pc, #44]	@ (80029a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800297a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2201      	movs	r2, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40020407 	.word	0x40020407
 800299c:	40020800 	.word	0x40020800
 80029a0:	40020820 	.word	0x40020820
 80029a4:	cccccccd 	.word	0xcccccccd
 80029a8:	40020880 	.word	0x40020880

080029ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2201      	movs	r2, #1
 80029da:	409a      	lsls	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	1000823f 	.word	0x1000823f
 80029f0:	40020940 	.word	0x40020940

080029f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e147      	b.n	8002c96 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd fd9a 	bl	8000554 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0210 	bic.w	r2, r2, #16
 8002a2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a30:	f7fe fd04 	bl	800143c <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a36:	e012      	b.n	8002a5e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a38:	f7fe fd00 	bl	800143c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b0a      	cmp	r3, #10
 8002a44:	d90b      	bls.n	8002a5e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2203      	movs	r2, #3
 8002a56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e11b      	b.n	8002c96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d0e5      	beq.n	8002a38 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a7c:	f7fe fcde 	bl	800143c <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a82:	e012      	b.n	8002aaa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a84:	f7fe fcda 	bl	800143c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b0a      	cmp	r3, #10
 8002a90:	d90b      	bls.n	8002aaa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0f5      	b.n	8002c96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0e5      	beq.n	8002a84 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0202 	orr.w	r2, r2, #2
 8002ac6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a74      	ldr	r2, [pc, #464]	@ (8002ca0 <HAL_FDCAN_Init+0x2ac>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d103      	bne.n	8002ada <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002ad2:	4a74      	ldr	r2, [pc, #464]	@ (8002ca4 <HAL_FDCAN_Init+0x2b0>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7c1b      	ldrb	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d108      	bne.n	8002af4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002af0:	619a      	str	r2, [r3, #24]
 8002af2:	e007      	b.n	8002b04 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b02:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7c5b      	ldrb	r3, [r3, #17]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d108      	bne.n	8002b1e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	e007      	b.n	8002b2e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7c9b      	ldrb	r3, [r3, #18]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b44:	619a      	str	r2, [r3, #24]
 8002b46:	e007      	b.n	8002b58 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b56:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002b7c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0210 	bic.w	r2, r2, #16
 8002b8c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0204 	orr.w	r2, r2, #4
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	e02c      	b.n	8002c02 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d028      	beq.n	8002c02 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d01c      	beq.n	8002bf2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bc6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0210 	orr.w	r2, r2, #16
 8002bd6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d110      	bne.n	8002c02 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	619a      	str	r2, [r3, #24]
 8002bf0:	e007      	b.n	8002c02 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c12:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c1a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c2a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c2c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c36:	d115      	bne.n	8002c64 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	3b01      	subs	r3, #1
 8002c44:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c46:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c50:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c60:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c62:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f9ae 	bl	8002fdc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40006400 	.word	0x40006400
 8002ca4:	40006500 	.word	0x40006500

08002ca8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	@ 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cdc:	4013      	ands	r3, r2
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002d02:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0a:	6a3a      	ldr	r2, [r7, #32]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002d1a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d36:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2240      	movs	r2, #64	@ 0x40
 8002d52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f921 	bl	8002f9c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d019      	beq.n	8002d98 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d014      	beq.n	8002d98 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d76:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002d90:	6939      	ldr	r1, [r7, #16]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8e3 	bl	8002f5e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f8a2 	bl	8002ef2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8a2 	bl	8002f08 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8a2 	bl	8002f1e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00c      	beq.n	8002dfe <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f89b 	bl	8002f34 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d013      	beq.n	8002e3a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e1a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2280      	movs	r2, #128	@ 0x80
 8002e30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f887 	bl	8002f48 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f88b 	bl	8002f74 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f883 	bl	8002f88 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00f      	beq.n	8002eac <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002eba:	69f9      	ldr	r1, [r7, #28]
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f881 	bl	8002fc4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f863 	bl	8002fb0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002eea:	bf00      	nop
 8002eec:	3730      	adds	r7, #48	@ 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002fe4:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002fe6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ff6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffe:	041a      	lsls	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800301c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003024:	061a      	lsls	r2, r3, #24
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e005      	b.n	800306a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3304      	adds	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3f3      	bcc.n	800305e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	4000a400 	.word	0x4000a400

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003096:	e15a      	b.n	800334e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 814c 	beq.w	8003348 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d005      	beq.n	80030c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0201 	and.w	r2, r3, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d017      	beq.n	8003166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d123      	bne.n	80031ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	6939      	ldr	r1, [r7, #16]
 80031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0203 	and.w	r2, r3, #3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80a6 	beq.w	8003348 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fc:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <HAL_GPIO_Init+0x2e4>)
 80031fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003200:	4a5a      	ldr	r2, [pc, #360]	@ (800336c <HAL_GPIO_Init+0x2e4>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6613      	str	r3, [r2, #96]	@ 0x60
 8003208:	4b58      	ldr	r3, [pc, #352]	@ (800336c <HAL_GPIO_Init+0x2e4>)
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003214:	4a56      	ldr	r2, [pc, #344]	@ (8003370 <HAL_GPIO_Init+0x2e8>)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800323e:	d01f      	beq.n	8003280 <HAL_GPIO_Init+0x1f8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a4c      	ldr	r2, [pc, #304]	@ (8003374 <HAL_GPIO_Init+0x2ec>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d019      	beq.n	800327c <HAL_GPIO_Init+0x1f4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a4b      	ldr	r2, [pc, #300]	@ (8003378 <HAL_GPIO_Init+0x2f0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_GPIO_Init+0x1f0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a4a      	ldr	r2, [pc, #296]	@ (800337c <HAL_GPIO_Init+0x2f4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00d      	beq.n	8003274 <HAL_GPIO_Init+0x1ec>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a49      	ldr	r2, [pc, #292]	@ (8003380 <HAL_GPIO_Init+0x2f8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <HAL_GPIO_Init+0x1e8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a48      	ldr	r2, [pc, #288]	@ (8003384 <HAL_GPIO_Init+0x2fc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_GPIO_Init+0x1e4>
 8003268:	2305      	movs	r3, #5
 800326a:	e00a      	b.n	8003282 <HAL_GPIO_Init+0x1fa>
 800326c:	2306      	movs	r3, #6
 800326e:	e008      	b.n	8003282 <HAL_GPIO_Init+0x1fa>
 8003270:	2304      	movs	r3, #4
 8003272:	e006      	b.n	8003282 <HAL_GPIO_Init+0x1fa>
 8003274:	2303      	movs	r3, #3
 8003276:	e004      	b.n	8003282 <HAL_GPIO_Init+0x1fa>
 8003278:	2302      	movs	r3, #2
 800327a:	e002      	b.n	8003282 <HAL_GPIO_Init+0x1fa>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_GPIO_Init+0x1fa>
 8003280:	2300      	movs	r3, #0
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	f002 0203 	and.w	r2, r2, #3
 8003288:	0092      	lsls	r2, r2, #2
 800328a:	4093      	lsls	r3, r2
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003292:	4937      	ldr	r1, [pc, #220]	@ (8003370 <HAL_GPIO_Init+0x2e8>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032a0:	4b39      	ldr	r3, [pc, #228]	@ (8003388 <HAL_GPIO_Init+0x300>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032c4:	4a30      	ldr	r2, [pc, #192]	@ (8003388 <HAL_GPIO_Init+0x300>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003388 <HAL_GPIO_Init+0x300>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ee:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <HAL_GPIO_Init+0x300>)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_GPIO_Init+0x300>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003318:	4a1b      	ldr	r2, [pc, #108]	@ (8003388 <HAL_GPIO_Init+0x300>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800331e:	4b1a      	ldr	r3, [pc, #104]	@ (8003388 <HAL_GPIO_Init+0x300>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003342:	4a11      	ldr	r2, [pc, #68]	@ (8003388 <HAL_GPIO_Init+0x300>)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3301      	adds	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	f47f ae9d 	bne.w	8003098 <HAL_GPIO_Init+0x10>
  }
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40021000 	.word	0x40021000
 8003370:	40010000 	.word	0x40010000
 8003374:	48000400 	.word	0x48000400
 8003378:	48000800 	.word	0x48000800
 800337c:	48000c00 	.word	0x48000c00
 8003380:	48001000 	.word	0x48001000
 8003384:	48001400 	.word	0x48001400
 8003388:	40010400 	.word	0x40010400

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a8:	e002      	b.n	80033b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e08d      	b.n	80034ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fa30 	bl	8000848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	@ 0x24
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800340c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800341c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e006      	b.n	8003444 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003442:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d108      	bne.n	800345e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	e007      	b.n	800346e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800346c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800347c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69d9      	ldr	r1, [r3, #28]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d138      	bne.n	800357a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003512:	2302      	movs	r3, #2
 8003514:	e032      	b.n	800357c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2224      	movs	r2, #36	@ 0x24
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003544:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	d139      	bne.n	8003612 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e033      	b.n	8003614 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	@ 0x24
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d141      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800362e:	4b4b      	ldr	r3, [pc, #300]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363a:	d131      	bne.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800363c:	4b47      	ldr	r3, [pc, #284]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003642:	4a46      	ldr	r2, [pc, #280]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800364c:	4b43      	ldr	r3, [pc, #268]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003654:	4a41      	ldr	r2, [pc, #260]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800365a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800365c:	4b40      	ldr	r3, [pc, #256]	@ (8003760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2232      	movs	r2, #50	@ 0x32
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	4a3f      	ldr	r2, [pc, #252]	@ (8003764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	0c9b      	lsrs	r3, r3, #18
 800366e:	3301      	adds	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003672:	e002      	b.n	800367a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3b01      	subs	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800367a:	4b38      	ldr	r3, [pc, #224]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d102      	bne.n	800368e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f2      	bne.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800368e:	4b33      	ldr	r3, [pc, #204]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d158      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e057      	b.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a0:	4b2e      	ldr	r3, [pc, #184]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a6:	4a2d      	ldr	r2, [pc, #180]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036b0:	e04d      	b.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b8:	d141      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ba:	4b28      	ldr	r3, [pc, #160]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c6:	d131      	bne.n	800372c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c8:	4b24      	ldr	r3, [pc, #144]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ce:	4a23      	ldr	r2, [pc, #140]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d8:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036e0:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2232      	movs	r2, #50	@ 0x32
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	0c9b      	lsrs	r3, r3, #18
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036fe:	e002      	b.n	8003706 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b01      	subs	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003706:	4b15      	ldr	r3, [pc, #84]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003712:	d102      	bne.n	800371a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003726:	d112      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e011      	b.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800372c:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800373c:	e007      	b.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800373e:	4b07      	ldr	r3, [pc, #28]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003746:	4a05      	ldr	r2, [pc, #20]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003748:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800374c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40007000 	.word	0x40007000
 8003760:	20000000 	.word	0x20000000
 8003764:	431bde83 	.word	0x431bde83

08003768 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003776:	6093      	str	r3, [r2, #8]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40007000 	.word	0x40007000

08003788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e2fe      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d075      	beq.n	8003892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a6:	4b97      	ldr	r3, [pc, #604]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b0:	4b94      	ldr	r3, [pc, #592]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_OscConfig+0x3e>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d002      	beq.n	80037cc <HAL_RCC_OscConfig+0x44>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d05b      	beq.n	8003890 <HAL_RCC_OscConfig+0x108>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d157      	bne.n	8003890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e2d9      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x74>
 80037ee:	4b85      	ldr	r3, [pc, #532]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a84      	ldr	r2, [pc, #528]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x98>
 8003806:	4b7f      	ldr	r3, [pc, #508]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b7c      	ldr	r3, [pc, #496]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7b      	ldr	r2, [pc, #492]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 8003820:	4b78      	ldr	r3, [pc, #480]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a77      	ldr	r2, [pc, #476]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b75      	ldr	r3, [pc, #468]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a74      	ldr	r2, [pc, #464]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd fdfc 	bl	800143c <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7fd fdf8 	bl	800143c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e29e      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xc0>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fde8 	bl	800143c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fd fde4 	bl	800143c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e28a      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003882:	4b60      	ldr	r3, [pc, #384]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0xe8>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d075      	beq.n	800398a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389e:	4b59      	ldr	r3, [pc, #356]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a8:	4b56      	ldr	r3, [pc, #344]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d102      	bne.n	80038be <HAL_RCC_OscConfig+0x136>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_OscConfig+0x13c>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d11f      	bne.n	8003904 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_OscConfig+0x154>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e25d      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b49      	ldr	r3, [pc, #292]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	4946      	ldr	r1, [pc, #280]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038f0:	4b45      	ldr	r3, [pc, #276]	@ (8003a08 <HAL_RCC_OscConfig+0x280>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fa45 	bl	8000d84 <HAL_InitTick>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d043      	beq.n	8003988 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e249      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d023      	beq.n	8003954 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a3c      	ldr	r2, [pc, #240]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fd fd90 	bl	800143c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003920:	f7fd fd8c 	bl	800143c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e232      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003932:	4b34      	ldr	r3, [pc, #208]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393e:	4b31      	ldr	r3, [pc, #196]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	492d      	ldr	r1, [pc, #180]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
 8003952:	e01a      	b.n	800398a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003954:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 800395a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fd6c 	bl	800143c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003968:	f7fd fd68 	bl	800143c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e20e      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397a:	4b22      	ldr	r3, [pc, #136]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1e0>
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003988:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d041      	beq.n	8003a1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b19      	ldr	r3, [pc, #100]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a4:	4a17      	ldr	r2, [pc, #92]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd fd45 	bl	800143c <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fd fd41 	bl	800143c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1e7      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ef      	beq.n	80039b6 <HAL_RCC_OscConfig+0x22e>
 80039d6:	e020      	b.n	8003a1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd fd28 	bl	800143c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ee:	e00d      	b.n	8003a0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fd fd24 	bl	800143c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d906      	bls.n	8003a0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1ca      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ea      	bne.n	80039f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80a6 	beq.w	8003b74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a2c:	4b84      	ldr	r3, [pc, #528]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2b4>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x2b6>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	4b7f      	ldr	r3, [pc, #508]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	4a7e      	ldr	r2, [pc, #504]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5e:	4b79      	ldr	r3, [pc, #484]	@ (8003c44 <HAL_RCC_OscConfig+0x4bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d118      	bne.n	8003a9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6a:	4b76      	ldr	r3, [pc, #472]	@ (8003c44 <HAL_RCC_OscConfig+0x4bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a75      	ldr	r2, [pc, #468]	@ (8003c44 <HAL_RCC_OscConfig+0x4bc>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a76:	f7fd fce1 	bl	800143c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fd fcdd 	bl	800143c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e183      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a90:	4b6c      	ldr	r3, [pc, #432]	@ (8003c44 <HAL_RCC_OscConfig+0x4bc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d108      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x32e>
 8003aa4:	4b66      	ldr	r3, [pc, #408]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	4a65      	ldr	r2, [pc, #404]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab4:	e024      	b.n	8003b00 <HAL_RCC_OscConfig+0x378>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d110      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x358>
 8003abe:	4b60      	ldr	r3, [pc, #384]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ace:	4b5c      	ldr	r3, [pc, #368]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ade:	e00f      	b.n	8003b00 <HAL_RCC_OscConfig+0x378>
 8003ae0:	4b57      	ldr	r3, [pc, #348]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	4a56      	ldr	r2, [pc, #344]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003af0:	4b53      	ldr	r3, [pc, #332]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	4a52      	ldr	r2, [pc, #328]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d016      	beq.n	8003b36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd fc98 	bl	800143c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd fc94 	bl	800143c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e138      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b26:	4b46      	ldr	r3, [pc, #280]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ed      	beq.n	8003b10 <HAL_RCC_OscConfig+0x388>
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fc81 	bl	800143c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fd fc7d 	bl	800143c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e121      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b54:	4b3a      	ldr	r3, [pc, #232]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ed      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b68:	4b35      	ldr	r3, [pc, #212]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6c:	4a34      	ldr	r2, [pc, #208]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b88:	4b2d      	ldr	r3, [pc, #180]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fc50 	bl	800143c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba0:	f7fd fc4c 	bl	800143c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0f2      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bb2:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x418>
 8003bc0:	e01b      	b.n	8003bfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd fc33 	bl	800143c <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bda:	f7fd fc2f 	bl	800143c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e0d5      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bec:	4b14      	ldr	r3, [pc, #80]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ef      	bne.n	8003bda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80c9 	beq.w	8003d96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c04:	4b0e      	ldr	r3, [pc, #56]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	f000 8083 	beq.w	8003d18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d15e      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a08      	ldr	r2, [pc, #32]	@ (8003c40 <HAL_RCC_OscConfig+0x4b8>)
 8003c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd fc09 	bl	800143c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2c:	e00c      	b.n	8003c48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fd fc05 	bl	800143c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d905      	bls.n	8003c48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0ab      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c48:	4b55      	ldr	r3, [pc, #340]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ec      	bne.n	8003c2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c54:	4b52      	ldr	r3, [pc, #328]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	4b52      	ldr	r3, [pc, #328]	@ (8003da4 <HAL_RCC_OscConfig+0x61c>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6a11      	ldr	r1, [r2, #32]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c6e:	0212      	lsls	r2, r2, #8
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0552      	lsls	r2, r2, #21
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c82:	0852      	lsrs	r2, r2, #1
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0652      	lsls	r2, r2, #25
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c8e:	06d2      	lsls	r2, r2, #27
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4943      	ldr	r1, [pc, #268]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c98:	4b41      	ldr	r3, [pc, #260]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a40      	ldr	r2, [pc, #256]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fbc4 	bl	800143c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fd fbc0 	bl	800143c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e066      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cca:	4b35      	ldr	r3, [pc, #212]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x530>
 8003cd6:	e05e      	b.n	8003d96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd8:	4b31      	ldr	r3, [pc, #196]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a30      	ldr	r2, [pc, #192]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fbaa 	bl	800143c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd fba6 	bl	800143c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04c      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfe:	4b28      	ldr	r3, [pc, #160]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d0a:	4b25      	ldr	r3, [pc, #148]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	4924      	ldr	r1, [pc, #144]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003d10:	4b25      	ldr	r3, [pc, #148]	@ (8003da8 <HAL_RCC_OscConfig+0x620>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	60cb      	str	r3, [r1, #12]
 8003d16:	e03e      	b.n	8003d96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e039      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d24:	4b1e      	ldr	r3, [pc, #120]	@ (8003da0 <HAL_RCC_OscConfig+0x618>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d12c      	bne.n	8003d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	3b01      	subs	r3, #1
 8003d44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d123      	bne.n	8003d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11b      	bne.n	8003d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d113      	bne.n	8003d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	019f800c 	.word	0x019f800c
 8003da8:	feeefffc 	.word	0xfeeefffc

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e11e      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b91      	ldr	r3, [pc, #580]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d910      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	498c      	ldr	r1, [pc, #560]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b8a      	ldr	r3, [pc, #552]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e106      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d073      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d129      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e08:	4b81      	ldr	r3, [pc, #516]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0f4      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e18:	f000 f9ba 	bl	8004190 <RCC_GetSysClockFreqFromPLLSource>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4a7c      	ldr	r2, [pc, #496]	@ (8004014 <HAL_RCC_ClockConfig+0x268>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d93f      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e26:	4b7a      	ldr	r3, [pc, #488]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d033      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d12f      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e46:	4b72      	ldr	r3, [pc, #456]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e4e:	4a70      	ldr	r2, [pc, #448]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e024      	b.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e64:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0c6      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e74:	4b66      	ldr	r3, [pc, #408]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0be      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e84:	f000 f8ce 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4a61      	ldr	r2, [pc, #388]	@ (8004014 <HAL_RCC_ClockConfig+0x268>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d909      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e92:	4b5f      	ldr	r3, [pc, #380]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4957      	ldr	r1, [pc, #348]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fd fac0 	bl	800143c <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec0:	f7fd fabc 	bl	800143c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e095      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 020c 	and.w	r2, r3, #12
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1eb      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d023      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f00:	4b43      	ldr	r3, [pc, #268]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a42      	ldr	r2, [pc, #264]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f18:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f20:	4a3b      	ldr	r2, [pc, #236]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4936      	ldr	r1, [pc, #216]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b80      	cmp	r3, #128	@ 0x80
 8003f40:	d105      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f42:	4b33      	ldr	r3, [pc, #204]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4a32      	ldr	r2, [pc, #200]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d21d      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 020f 	bic.w	r2, r3, #15
 8003f64:	4929      	ldr	r1, [pc, #164]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f6c:	f7fd fa66 	bl	800143c <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f74:	f7fd fa62 	bl	800143c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e03b      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1ed      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4917      	ldr	r1, [pc, #92]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490f      	ldr	r1, [pc, #60]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fd6:	f000 f825 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490c      	ldr	r1, [pc, #48]	@ (8004018 <HAL_RCC_ClockConfig+0x26c>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800401c <HAL_RCC_ClockConfig+0x270>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc fec2 	bl	8000d84 <HAL_InitTick>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40022000 	.word	0x40022000
 8004010:	40021000 	.word	0x40021000
 8004014:	04c4b400 	.word	0x04c4b400
 8004018:	08009690 	.word	0x08009690
 800401c:	20000000 	.word	0x20000000
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800402a:	4b2c      	ldr	r3, [pc, #176]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b04      	cmp	r3, #4
 8004034:	d102      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004036:	4b2a      	ldr	r3, [pc, #168]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e047      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800403c:	4b27      	ldr	r3, [pc, #156]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d102      	bne.n	800404e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004048:	4b26      	ldr	r3, [pc, #152]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e03e      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b0c      	cmp	r3, #12
 8004058:	d136      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800405a:	4b20      	ldr	r3, [pc, #128]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004064:	4b1d      	ldr	r3, [pc, #116]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d10c      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004078:	4a1a      	ldr	r2, [pc, #104]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	4a16      	ldr	r2, [pc, #88]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004082:	68d2      	ldr	r2, [r2, #12]
 8004084:	0a12      	lsrs	r2, r2, #8
 8004086:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	617b      	str	r3, [r7, #20]
      break;
 8004090:	e00c      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004092:	4a13      	ldr	r2, [pc, #76]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	4a10      	ldr	r2, [pc, #64]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	0a12      	lsrs	r2, r2, #8
 80040a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
      break;
 80040aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0e5b      	lsrs	r3, r3, #25
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	3301      	adds	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e001      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040cc:	693b      	ldr	r3, [r7, #16]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	016e3600 	.word	0x016e3600

080040e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b03      	ldr	r3, [pc, #12]	@ (80040fc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000000 	.word	0x20000000

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004104:	f7ff fff0 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0adb      	lsrs	r3, r3, #11
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4904      	ldr	r1, [pc, #16]	@ (8004128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	080096a0 	.word	0x080096a0

0800412c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	220f      	movs	r2, #15
 800413a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800413c:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0203 	and.w	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004148:	4b0f      	ldr	r3, [pc, #60]	@ (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004154:	4b0c      	ldr	r3, [pc, #48]	@ (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004160:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <HAL_RCC_GetClockConfig+0x60>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 020f 	and.w	r2, r3, #15
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40022000 	.word	0x40022000

08004190 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004196:	4b1e      	ldr	r3, [pc, #120]	@ (8004210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d10c      	bne.n	80041ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041b4:	4a17      	ldr	r2, [pc, #92]	@ (8004214 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	4a14      	ldr	r2, [pc, #80]	@ (8004210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041be:	68d2      	ldr	r2, [r2, #12]
 80041c0:	0a12      	lsrs	r2, r2, #8
 80041c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	617b      	str	r3, [r7, #20]
    break;
 80041cc:	e00c      	b.n	80041e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ce:	4a12      	ldr	r2, [pc, #72]	@ (8004218 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d8:	68d2      	ldr	r2, [r2, #12]
 80041da:	0a12      	lsrs	r2, r2, #8
 80041dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
    break;
 80041e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	0e5b      	lsrs	r3, r3, #25
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	3301      	adds	r3, #1
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004202:	687b      	ldr	r3, [r7, #4]
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40021000 	.word	0x40021000
 8004214:	016e3600 	.word	0x016e3600
 8004218:	00f42400 	.word	0x00f42400

0800421c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004224:	2300      	movs	r3, #0
 8004226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004228:	2300      	movs	r3, #0
 800422a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8098 	beq.w	800436a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b43      	ldr	r3, [pc, #268]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10d      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	4b40      	ldr	r3, [pc, #256]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	4a3f      	ldr	r2, [pc, #252]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6593      	str	r3, [r2, #88]	@ 0x58
 8004256:	4b3d      	ldr	r3, [pc, #244]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004262:	2301      	movs	r3, #1
 8004264:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004266:	4b3a      	ldr	r3, [pc, #232]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a39      	ldr	r2, [pc, #228]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004272:	f7fd f8e3 	bl	800143c <HAL_GetTick>
 8004276:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004278:	e009      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fd f8df 	bl	800143c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d902      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	74fb      	strb	r3, [r7, #19]
        break;
 800428c:	e005      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800428e:	4b30      	ldr	r3, [pc, #192]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ef      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d159      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042a0:	4b2a      	ldr	r3, [pc, #168]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01e      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d019      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042bc:	4b23      	ldr	r3, [pc, #140]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042c8:	4b20      	ldr	r3, [pc, #128]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042d8:	4b1c      	ldr	r3, [pc, #112]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	4a1b      	ldr	r2, [pc, #108]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042e8:	4a18      	ldr	r2, [pc, #96]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd f89f 	bl	800143c <HAL_GetTick>
 80042fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004300:	e00b      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fd f89b 	bl	800143c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004310:	4293      	cmp	r3, r2
 8004312:	d902      	bls.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	74fb      	strb	r3, [r7, #19]
            break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431a:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ec      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432e:	4b07      	ldr	r3, [pc, #28]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	4903      	ldr	r1, [pc, #12]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	74bb      	strb	r3, [r7, #18]
 800434a:	e005      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800434c:	40021000 	.word	0x40021000
 8004350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004358:	7c7b      	ldrb	r3, [r7, #17]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435e:	4ba6      	ldr	r3, [pc, #664]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	4aa5      	ldr	r2, [pc, #660]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004368:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004376:	4ba0      	ldr	r3, [pc, #640]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f023 0203 	bic.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	499c      	ldr	r1, [pc, #624]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004398:	4b97      	ldr	r3, [pc, #604]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439e:	f023 020c 	bic.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	4994      	ldr	r1, [pc, #592]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ba:	4b8f      	ldr	r3, [pc, #572]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	498b      	ldr	r1, [pc, #556]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043dc:	4b86      	ldr	r3, [pc, #536]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	4983      	ldr	r1, [pc, #524]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043fe:	4b7e      	ldr	r3, [pc, #504]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	497a      	ldr	r1, [pc, #488]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004420:	4b75      	ldr	r3, [pc, #468]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	4972      	ldr	r1, [pc, #456]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004442:	4b6d      	ldr	r3, [pc, #436]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004448:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4969      	ldr	r1, [pc, #420]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004464:	4b64      	ldr	r3, [pc, #400]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4961      	ldr	r1, [pc, #388]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004486:	4b5c      	ldr	r3, [pc, #368]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	4958      	ldr	r1, [pc, #352]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a8:	4b53      	ldr	r3, [pc, #332]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	4950      	ldr	r1, [pc, #320]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a4a      	ldr	r2, [pc, #296]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044e0:	4b45      	ldr	r3, [pc, #276]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	4942      	ldr	r1, [pc, #264]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004500:	4b3d      	ldr	r3, [pc, #244]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a3c      	ldr	r2, [pc, #240]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800450a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004518:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	4934      	ldr	r1, [pc, #208]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004536:	d105      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004538:	4b2f      	ldr	r3, [pc, #188]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a2e      	ldr	r2, [pc, #184]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004542:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004550:	4b29      	ldr	r3, [pc, #164]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	4926      	ldr	r1, [pc, #152]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004570:	4b21      	ldr	r3, [pc, #132]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d015      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	4918      	ldr	r1, [pc, #96]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045a6:	d105      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a8:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a12      	ldr	r2, [pc, #72]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045c0:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ce:	490a      	ldr	r1, [pc, #40]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045de:	d105      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045e0:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000

080045fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e09d      	b.n	800474a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800461e:	d009      	beq.n	8004634 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	61da      	str	r2, [r3, #28]
 8004626:	e005      	b.n	8004634 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc faf8 	bl	8000c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800466a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004674:	d902      	bls.n	800467c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e002      	b.n	8004682 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800467c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004680:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800468a:	d007      	beq.n	800469c <HAL_SPI_Init+0xa0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004694:	d002      	beq.n	800469c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	ea42 0103 	orr.w	r1, r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	f003 0204 	and.w	r2, r3, #4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004718:	ea42 0103 	orr.w	r1, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004738:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b088      	sub	sp, #32
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004762:	f7fc fe6b 	bl	800143c <HAL_GetTick>
 8004766:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	e15c      	b.n	8004a36 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Transmit+0x36>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e154      	b.n	8004a36 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_SPI_Transmit+0x48>
 8004796:	2302      	movs	r3, #2
 8004798:	e14d      	b.n	8004a36 <HAL_SPI_Transmit+0x2e4>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2203      	movs	r2, #3
 80047a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ec:	d10f      	bne.n	800480e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800480c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	d007      	beq.n	800482c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004834:	d952      	bls.n	80048dc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <HAL_SPI_Transmit+0xf2>
 800483e:	8b7b      	ldrh	r3, [r7, #26]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d145      	bne.n	80048d0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	1c9a      	adds	r2, r3, #2
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004868:	e032      	b.n	80048d0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d112      	bne.n	800489e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800489c:	e018      	b.n	80048d0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489e:	f7fc fdcd 	bl	800143c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d803      	bhi.n	80048b6 <HAL_SPI_Transmit+0x164>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d102      	bne.n	80048bc <HAL_SPI_Transmit+0x16a>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0b2      	b.n	8004a36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1c7      	bne.n	800486a <HAL_SPI_Transmit+0x118>
 80048da:	e083      	b.n	80049e4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_SPI_Transmit+0x198>
 80048e4:	8b7b      	ldrh	r3, [r7, #26]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d177      	bne.n	80049da <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d912      	bls.n	800491a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	881a      	ldrh	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b02      	subs	r3, #2
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004918:	e05f      	b.n	80049da <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004940:	e04b      	b.n	80049da <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d12b      	bne.n	80049a8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d912      	bls.n	8004980 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b02      	subs	r3, #2
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800497e:	e02c      	b.n	80049da <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049a6:	e018      	b.n	80049da <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a8:	f7fc fd48 	bl	800143c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d803      	bhi.n	80049c0 <HAL_SPI_Transmit+0x26e>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_Transmit+0x274>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e02d      	b.n	8004a36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ae      	bne.n	8004942 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	6839      	ldr	r1, [r7, #0]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fb65 	bl	80050b8 <SPI_EndRxTxTransaction>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b08a      	sub	sp, #40	@ 0x28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a50:	f7fc fcf4 	bl	800143c <HAL_GetTick>
 8004a54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004a64:	887b      	ldrh	r3, [r7, #2]
 8004a66:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a6c:	7ffb      	ldrb	r3, [r7, #31]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d00c      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x4e>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a78:	d106      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x4a>
 8004a82:	7ffb      	ldrb	r3, [r7, #31]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d001      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e1f3      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_SPI_TransmitReceive+0x60>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_SPI_TransmitReceive+0x60>
 8004a98:	887b      	ldrh	r3, [r7, #2]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e1e8      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x72>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e1e1      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x436>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d003      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	887a      	ldrh	r2, [r7, #2]
 8004af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b0e:	d802      	bhi.n	8004b16 <HAL_SPI_TransmitReceive+0xd8>
 8004b10:	8abb      	ldrh	r3, [r7, #20]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d908      	bls.n	8004b28 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	e007      	b.n	8004b38 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b36:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b42:	2b40      	cmp	r3, #64	@ 0x40
 8004b44:	d007      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b5e:	f240 8083 	bls.w	8004c68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_TransmitReceive+0x132>
 8004b6a:	8afb      	ldrh	r3, [r7, #22]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d16f      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b74:	881a      	ldrh	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b94:	e05c      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d11b      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x19e>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x19e>
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d113      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	881a      	ldrh	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	1c9a      	adds	r2, r3, #2
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11c      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x1e6>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	b292      	uxth	r2, r2
 8004c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	1c9a      	adds	r2, r3, #2
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c20:	2301      	movs	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c24:	f7fc fc0a 	bl	800143c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d80d      	bhi.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e111      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d19d      	bne.n	8004b96 <HAL_SPI_TransmitReceive+0x158>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d197      	bne.n	8004b96 <HAL_SPI_TransmitReceive+0x158>
 8004c66:	e0e5      	b.n	8004e34 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x23a>
 8004c70:	8afb      	ldrh	r3, [r7, #22]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	f040 80d1 	bne.w	8004e1a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d912      	bls.n	8004ca8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b02      	subs	r3, #2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ca6:	e0b8      	b.n	8004e1a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	7812      	ldrb	r2, [r2, #0]
 8004cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cce:	e0a4      	b.n	8004e1a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d134      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x30a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02f      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x30a>
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d12c      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d912      	bls.n	8004d1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfc:	881a      	ldrh	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b02      	subs	r3, #2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d1c:	e012      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d148      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x3aa>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d042      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d923      	bls.n	8004db6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	1c9a      	adds	r2, r3, #2
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b02      	subs	r3, #2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d81f      	bhi.n	8004de4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	e016      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f103 020c 	add.w	r2, r3, #12
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de4:	2301      	movs	r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004de8:	f7fc fb28 	bl	800143c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d803      	bhi.n	8004e00 <HAL_SPI_TransmitReceive+0x3c2>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d102      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x3c8>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e02c      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f47f af55 	bne.w	8004cd0 <HAL_SPI_TransmitReceive+0x292>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f47f af4e 	bne.w	8004cd0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f93d 	bl	80050b8 <SPI_EndRxTxTransaction>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e00e      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004e72:	2300      	movs	r3, #0
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3728      	adds	r7, #40	@ 0x28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e8c:	f7fc fad6 	bl	800143c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	4413      	add	r3, r2
 8004e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e9c:	f7fc face 	bl	800143c <HAL_GetTick>
 8004ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ea2:	4b39      	ldr	r3, [pc, #228]	@ (8004f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	015b      	lsls	r3, r3, #5
 8004ea8:	0d1b      	lsrs	r3, r3, #20
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eb2:	e054      	b.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d050      	beq.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ebc:	f7fc fabe 	bl	800143c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d902      	bls.n	8004ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d13d      	bne.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eea:	d111      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef4:	d004      	beq.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004efe:	d107      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f18:	d10f      	bne.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e017      	b.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4013      	ands	r3, r2
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d19b      	bne.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000000 	.word	0x20000000

08004f8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	@ 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f9e:	f7fc fa4d 	bl	800143c <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004fae:	f7fc fa45 	bl	800143c <HAL_GetTick>
 8004fb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80050b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00da      	lsls	r2, r3, #3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	0d1b      	lsrs	r3, r3, #20
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fd4:	e060      	b.n	8005098 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fdc:	d107      	bne.n	8004fee <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d050      	beq.n	8005098 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ff6:	f7fc fa21 	bl	800143c <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005002:	429a      	cmp	r2, r3
 8005004:	d902      	bls.n	800500c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d13d      	bne.n	8005088 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800501a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005024:	d111      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800502e:	d004      	beq.n	800503a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005038:	d107      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005048:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005052:	d10f      	bne.n	8005074 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005072:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e010      	b.n	80050aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3b01      	subs	r3, #1
 8005096:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4013      	ands	r3, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d196      	bne.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3728      	adds	r7, #40	@ 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000

080050b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f7ff ff5b 	bl	8004f8c <SPI_WaitFifoStateUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e0:	f043 0220 	orr.w	r2, r3, #32
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e027      	b.n	800513c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	2180      	movs	r1, #128	@ 0x80
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7ff fec0 	bl	8004e7c <SPI_WaitFlagStateUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e014      	b.n	800513c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7ff ff34 	bl	8004f8c <SPI_WaitFifoStateUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e000      	b.n	800513c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e049      	b.n	80051ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fc f834 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fd88 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e04a      	b.n	80052a2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a21      	ldr	r2, [pc, #132]	@ (80052b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0x6c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005236:	d013      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0x6c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0x6c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0x6c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1a      	ldr	r2, [pc, #104]	@ (80052bc <HAL_TIM_Base_Start_IT+0xc8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0x6c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a19      	ldr	r2, [pc, #100]	@ (80052c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d115      	bne.n	800528c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005268:	4013      	ands	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b06      	cmp	r3, #6
 8005270:	d015      	beq.n	800529e <HAL_TIM_Base_Start_IT+0xaa>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005278:	d011      	beq.n	800529e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	e008      	b.n	800529e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e000      	b.n	80052a0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	00010007 	.word	0x00010007

080052c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e049      	b.n	800536e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f841 	bl	8005376 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fcc6 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_TIM_PWM_Start+0x24>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e03c      	b.n	800542a <HAL_TIM_PWM_Start+0x9e>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d109      	bne.n	80053ca <HAL_TIM_PWM_Start+0x3e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e02f      	b.n	800542a <HAL_TIM_PWM_Start+0x9e>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d109      	bne.n	80053e4 <HAL_TIM_PWM_Start+0x58>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	bf14      	ite	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	2300      	moveq	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e022      	b.n	800542a <HAL_TIM_PWM_Start+0x9e>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d109      	bne.n	80053fe <HAL_TIM_PWM_Start+0x72>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	bf14      	ite	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	2300      	moveq	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	e015      	b.n	800542a <HAL_TIM_PWM_Start+0x9e>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b10      	cmp	r3, #16
 8005402:	d109      	bne.n	8005418 <HAL_TIM_PWM_Start+0x8c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e008      	b.n	800542a <HAL_TIM_PWM_Start+0x9e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e097      	b.n	8005562 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xb6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005440:	e023      	b.n	800548a <HAL_TIM_PWM_Start+0xfe>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d104      	bne.n	8005452 <HAL_TIM_PWM_Start+0xc6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005450:	e01b      	b.n	800548a <HAL_TIM_PWM_Start+0xfe>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d104      	bne.n	8005462 <HAL_TIM_PWM_Start+0xd6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005460:	e013      	b.n	800548a <HAL_TIM_PWM_Start+0xfe>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b0c      	cmp	r3, #12
 8005466:	d104      	bne.n	8005472 <HAL_TIM_PWM_Start+0xe6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005470:	e00b      	b.n	800548a <HAL_TIM_PWM_Start+0xfe>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b10      	cmp	r3, #16
 8005476:	d104      	bne.n	8005482 <HAL_TIM_PWM_Start+0xf6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005480:	e003      	b.n	800548a <HAL_TIM_PWM_Start+0xfe>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2201      	movs	r2, #1
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f82e 	bl	80064f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a33      	ldr	r2, [pc, #204]	@ (800556c <HAL_TIM_PWM_Start+0x1e0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_TIM_PWM_Start+0x13e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a32      	ldr	r2, [pc, #200]	@ (8005570 <HAL_TIM_PWM_Start+0x1e4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00e      	beq.n	80054ca <HAL_TIM_PWM_Start+0x13e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a30      	ldr	r2, [pc, #192]	@ (8005574 <HAL_TIM_PWM_Start+0x1e8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_TIM_PWM_Start+0x13e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005578 <HAL_TIM_PWM_Start+0x1ec>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_TIM_PWM_Start+0x13e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2d      	ldr	r2, [pc, #180]	@ (800557c <HAL_TIM_PWM_Start+0x1f0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_PWM_Start+0x142>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <HAL_TIM_PWM_Start+0x144>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a20      	ldr	r2, [pc, #128]	@ (800556c <HAL_TIM_PWM_Start+0x1e0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d018      	beq.n	8005520 <HAL_TIM_PWM_Start+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f6:	d013      	beq.n	8005520 <HAL_TIM_PWM_Start+0x194>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a20      	ldr	r2, [pc, #128]	@ (8005580 <HAL_TIM_PWM_Start+0x1f4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00e      	beq.n	8005520 <HAL_TIM_PWM_Start+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <HAL_TIM_PWM_Start+0x1f8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_TIM_PWM_Start+0x194>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <HAL_TIM_PWM_Start+0x1e4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_TIM_PWM_Start+0x194>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a16      	ldr	r2, [pc, #88]	@ (8005574 <HAL_TIM_PWM_Start+0x1e8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d115      	bne.n	800554c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	4b18      	ldr	r3, [pc, #96]	@ (8005588 <HAL_TIM_PWM_Start+0x1fc>)
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b06      	cmp	r3, #6
 8005530:	d015      	beq.n	800555e <HAL_TIM_PWM_Start+0x1d2>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005538:	d011      	beq.n	800555e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	e008      	b.n	800555e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e000      	b.n	8005560 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	00010007 	.word	0x00010007

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fb40 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fb32 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb43 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb1a 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fb0c 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fb1d 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 faf4 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fae6 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 faf7 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 face 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fac0 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fad1 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fb fa12 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 f825 	bl	8006770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f001 f81d 	bl	8006784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa8b 	bl	8005c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0220 	mvn.w	r2, #32
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 ffe5 	bl	800675c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fff1 	bl	8006798 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00c      	beq.n	80057da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 ffe9 	bl	80067ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00c      	beq.n	80057fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 ffe1 	bl	80067c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00c      	beq.n	8005822 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 ffd9 	bl	80067d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e0ff      	b.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b14      	cmp	r3, #20
 8005856:	f200 80f0 	bhi.w	8005a3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	080058b5 	.word	0x080058b5
 8005864:	08005a3b 	.word	0x08005a3b
 8005868:	08005a3b 	.word	0x08005a3b
 800586c:	08005a3b 	.word	0x08005a3b
 8005870:	080058f5 	.word	0x080058f5
 8005874:	08005a3b 	.word	0x08005a3b
 8005878:	08005a3b 	.word	0x08005a3b
 800587c:	08005a3b 	.word	0x08005a3b
 8005880:	08005937 	.word	0x08005937
 8005884:	08005a3b 	.word	0x08005a3b
 8005888:	08005a3b 	.word	0x08005a3b
 800588c:	08005a3b 	.word	0x08005a3b
 8005890:	08005977 	.word	0x08005977
 8005894:	08005a3b 	.word	0x08005a3b
 8005898:	08005a3b 	.word	0x08005a3b
 800589c:	08005a3b 	.word	0x08005a3b
 80058a0:	080059b9 	.word	0x080059b9
 80058a4:	08005a3b 	.word	0x08005a3b
 80058a8:	08005a3b 	.word	0x08005a3b
 80058ac:	08005a3b 	.word	0x08005a3b
 80058b0:	080059f9 	.word	0x080059f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fa88 	bl	8005dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0208 	orr.w	r2, r2, #8
 80058ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0204 	bic.w	r2, r2, #4
 80058de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6999      	ldr	r1, [r3, #24]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	619a      	str	r2, [r3, #24]
      break;
 80058f2:	e0a5      	b.n	8005a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 faf8 	bl	8005ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800590e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800591e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6999      	ldr	r1, [r3, #24]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	021a      	lsls	r2, r3, #8
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	619a      	str	r2, [r3, #24]
      break;
 8005934:	e084      	b.n	8005a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fb61 	bl	8006004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0208 	orr.w	r2, r2, #8
 8005950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0204 	bic.w	r2, r2, #4
 8005960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69d9      	ldr	r1, [r3, #28]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	61da      	str	r2, [r3, #28]
      break;
 8005974:	e064      	b.n	8005a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fbc9 	bl	8006114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69d9      	ldr	r1, [r3, #28]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	021a      	lsls	r2, r3, #8
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	61da      	str	r2, [r3, #28]
      break;
 80059b6:	e043      	b.n	8005a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fc32 	bl	8006228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0208 	orr.w	r2, r2, #8
 80059d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059f6:	e023      	b.n	8005a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fc76 	bl	80062f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a38:	e002      	b.n	8005a40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop

08005a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e0de      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x1da>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a63      	ldr	r2, [pc, #396]	@ (8005c38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	f000 80a9 	beq.w	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ab0:	4a61      	ldr	r2, [pc, #388]	@ (8005c38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	f200 80ae 	bhi.w	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab8:	4a60      	ldr	r2, [pc, #384]	@ (8005c3c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	f000 80a1 	beq.w	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8005c3c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	f200 80a6 	bhi.w	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8005c40 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	f000 8099 	beq.w	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8005c40 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	f200 809e 	bhi.w	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8005c44 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	f000 8091 	beq.w	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ae0:	4a58      	ldr	r2, [pc, #352]	@ (8005c44 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	f200 8096 	bhi.w	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ae8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005aec:	f000 8089 	beq.w	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005af0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005af4:	f200 808e 	bhi.w	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afc:	d03e      	beq.n	8005b7c <HAL_TIM_ConfigClockSource+0x128>
 8005afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b02:	f200 8087 	bhi.w	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0a:	f000 8086 	beq.w	8005c1a <HAL_TIM_ConfigClockSource+0x1c6>
 8005b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b12:	d87f      	bhi.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b14:	2b70      	cmp	r3, #112	@ 0x70
 8005b16:	d01a      	beq.n	8005b4e <HAL_TIM_ConfigClockSource+0xfa>
 8005b18:	2b70      	cmp	r3, #112	@ 0x70
 8005b1a:	d87b      	bhi.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b1c:	2b60      	cmp	r3, #96	@ 0x60
 8005b1e:	d050      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
 8005b20:	2b60      	cmp	r3, #96	@ 0x60
 8005b22:	d877      	bhi.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b24:	2b50      	cmp	r3, #80	@ 0x50
 8005b26:	d03c      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x14e>
 8005b28:	2b50      	cmp	r3, #80	@ 0x50
 8005b2a:	d873      	bhi.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d058      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0x18e>
 8005b30:	2b40      	cmp	r3, #64	@ 0x40
 8005b32:	d86f      	bhi.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b34:	2b30      	cmp	r3, #48	@ 0x30
 8005b36:	d064      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b38:	2b30      	cmp	r3, #48	@ 0x30
 8005b3a:	d86b      	bhi.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d060      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d867      	bhi.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d05c      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d05a      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b4c:	e062      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b5e:	f000 fca9 	bl	80064b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	609a      	str	r2, [r3, #8]
      break;
 8005b7a:	e04f      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b8c:	f000 fc92 	bl	80064b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b9e:	609a      	str	r2, [r3, #8]
      break;
 8005ba0:	e03c      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f000 fc04 	bl	80063bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2150      	movs	r1, #80	@ 0x50
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fc5d 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005bc0:	e02c      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f000 fc23 	bl	800641a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2160      	movs	r1, #96	@ 0x60
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fc4d 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005be0:	e01c      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f000 fbe4 	bl	80063bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2140      	movs	r1, #64	@ 0x40
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fc3d 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005c00:	e00c      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 fc34 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005c12:	e003      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
      break;
 8005c18:	e000      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	00100070 	.word	0x00100070
 8005c3c:	00100040 	.word	0x00100040
 8005c40:	00100030 	.word	0x00100030
 8005c44:	00100020 	.word	0x00100020

08005c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a42      	ldr	r2, [pc, #264]	@ (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3f      	ldr	r2, [pc, #252]	@ (8005db8 <TIM_Base_SetConfig+0x120>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8005dbc <TIM_Base_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3d      	ldr	r2, [pc, #244]	@ (8005dc0 <TIM_Base_SetConfig+0x128>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d108      	bne.n	8005ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a33      	ldr	r2, [pc, #204]	@ (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01b      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf0:	d017      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a30      	ldr	r2, [pc, #192]	@ (8005db8 <TIM_Base_SetConfig+0x120>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8005dbc <TIM_Base_SetConfig+0x124>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00f      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc0 <TIM_Base_SetConfig+0x128>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00b      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d007      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc8 <TIM_Base_SetConfig+0x130>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d003      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005dcc <TIM_Base_SetConfig+0x134>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d108      	bne.n	8005d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a16      	ldr	r2, [pc, #88]	@ (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00f      	beq.n	8005d80 <TIM_Base_SetConfig+0xe8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <TIM_Base_SetConfig+0x128>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00b      	beq.n	8005d80 <TIM_Base_SetConfig+0xe8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a16      	ldr	r2, [pc, #88]	@ (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d007      	beq.n	8005d80 <TIM_Base_SetConfig+0xe8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a15      	ldr	r2, [pc, #84]	@ (8005dc8 <TIM_Base_SetConfig+0x130>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_Base_SetConfig+0xe8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a14      	ldr	r2, [pc, #80]	@ (8005dcc <TIM_Base_SetConfig+0x134>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d103      	bne.n	8005d88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d105      	bne.n	8005da6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]
  }
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40012c00 	.word	0x40012c00
 8005db8:	40000400 	.word	0x40000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800

08005dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f023 0201 	bic.w	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 0302 	bic.w	r3, r3, #2
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005edc <TIM_OC1_SetConfig+0x10c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00f      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee0 <TIM_OC1_SetConfig+0x110>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee4 <TIM_OC1_SetConfig+0x114>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a29      	ldr	r2, [pc, #164]	@ (8005ee8 <TIM_OC1_SetConfig+0x118>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC1_SetConfig+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a28      	ldr	r2, [pc, #160]	@ (8005eec <TIM_OC1_SetConfig+0x11c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10c      	bne.n	8005e6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0308 	bic.w	r3, r3, #8
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0304 	bic.w	r3, r3, #4
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005edc <TIM_OC1_SetConfig+0x10c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00f      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee0 <TIM_OC1_SetConfig+0x110>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00b      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ee4 <TIM_OC1_SetConfig+0x114>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <TIM_OC1_SetConfig+0x118>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_OC1_SetConfig+0xc2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	@ (8005eec <TIM_OC1_SetConfig+0x11c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d111      	bne.n	8005eb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800

08005ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f023 0210 	bic.w	r2, r3, #16
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0320 	bic.w	r3, r3, #32
 8005f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a28      	ldr	r2, [pc, #160]	@ (8005ff0 <TIM_OC2_SetConfig+0x100>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC2_SetConfig+0x6c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a27      	ldr	r2, [pc, #156]	@ (8005ff4 <TIM_OC2_SetConfig+0x104>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d10d      	bne.n	8005f78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff0 <TIM_OC2_SetConfig+0x100>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff4 <TIM_OC2_SetConfig+0x104>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <TIM_OC2_SetConfig+0x108>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a1a      	ldr	r2, [pc, #104]	@ (8005ffc <TIM_OC2_SetConfig+0x10c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC2_SetConfig+0xb0>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a19      	ldr	r2, [pc, #100]	@ (8006000 <TIM_OC2_SetConfig+0x110>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d113      	bne.n	8005fc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40012c00 	.word	0x40012c00
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a27      	ldr	r2, [pc, #156]	@ (8006100 <TIM_OC3_SetConfig+0xfc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_OC3_SetConfig+0x6a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a26      	ldr	r2, [pc, #152]	@ (8006104 <TIM_OC3_SetConfig+0x100>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10d      	bne.n	800608a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1c      	ldr	r2, [pc, #112]	@ (8006100 <TIM_OC3_SetConfig+0xfc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00f      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1b      	ldr	r2, [pc, #108]	@ (8006104 <TIM_OC3_SetConfig+0x100>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00b      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1a      	ldr	r2, [pc, #104]	@ (8006108 <TIM_OC3_SetConfig+0x104>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a19      	ldr	r2, [pc, #100]	@ (800610c <TIM_OC3_SetConfig+0x108>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_OC3_SetConfig+0xae>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <TIM_OC3_SetConfig+0x10c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d113      	bne.n	80060da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	621a      	str	r2, [r3, #32]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40013400 	.word	0x40013400
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800614e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a28      	ldr	r2, [pc, #160]	@ (8006214 <TIM_OC4_SetConfig+0x100>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC4_SetConfig+0x6c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a27      	ldr	r2, [pc, #156]	@ (8006218 <TIM_OC4_SetConfig+0x104>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10d      	bne.n	800619c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800619a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a1d      	ldr	r2, [pc, #116]	@ (8006214 <TIM_OC4_SetConfig+0x100>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00f      	beq.n	80061c4 <TIM_OC4_SetConfig+0xb0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <TIM_OC4_SetConfig+0x104>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <TIM_OC4_SetConfig+0xb0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1b      	ldr	r2, [pc, #108]	@ (800621c <TIM_OC4_SetConfig+0x108>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <TIM_OC4_SetConfig+0xb0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006220 <TIM_OC4_SetConfig+0x10c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_OC4_SetConfig+0xb0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a19      	ldr	r2, [pc, #100]	@ (8006224 <TIM_OC4_SetConfig+0x110>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d113      	bne.n	80061ec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	019b      	lsls	r3, r3, #6
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	019b      	lsls	r3, r3, #6
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a17      	ldr	r2, [pc, #92]	@ (80062dc <TIM_OC5_SetConfig+0xb4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a16      	ldr	r2, [pc, #88]	@ (80062e0 <TIM_OC5_SetConfig+0xb8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <TIM_OC5_SetConfig+0xbc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a14      	ldr	r2, [pc, #80]	@ (80062e8 <TIM_OC5_SetConfig+0xc0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a13      	ldr	r2, [pc, #76]	@ (80062ec <TIM_OC5_SetConfig+0xc4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d109      	bne.n	80062b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40013400 	.word	0x40013400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800

080062f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800631e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	051b      	lsls	r3, r3, #20
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a18      	ldr	r2, [pc, #96]	@ (80063a8 <TIM_OC6_SetConfig+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00f      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a17      	ldr	r2, [pc, #92]	@ (80063ac <TIM_OC6_SetConfig+0xbc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a16      	ldr	r2, [pc, #88]	@ (80063b0 <TIM_OC6_SetConfig+0xc0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a15      	ldr	r2, [pc, #84]	@ (80063b4 <TIM_OC6_SetConfig+0xc4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a14      	ldr	r2, [pc, #80]	@ (80063b8 <TIM_OC6_SetConfig+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d109      	bne.n	8006380 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800

080063bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 030a 	bic.w	r3, r3, #10
 80063f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641a:	b480      	push	{r7}
 800641c:	b087      	sub	sp, #28
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f023 0210 	bic.w	r2, r3, #16
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	031b      	lsls	r3, r3, #12
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006456:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	f043 0307 	orr.w	r3, r3, #7
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2201      	movs	r2, #1
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	43db      	mvns	r3, r3
 8006516:	401a      	ands	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e065      	b.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2c      	ldr	r2, [pc, #176]	@ (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a2b      	ldr	r2, [pc, #172]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d108      	bne.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ce:	d013      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a18      	ldr	r2, [pc, #96]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a17      	ldr	r2, [pc, #92]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a12      	ldr	r2, [pc, #72]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a13      	ldr	r2, [pc, #76]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10c      	bne.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40014000 	.word	0x40014000

08006644 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800665c:	2302      	movs	r3, #2
 800665e:	e073      	b.n	8006748 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a19      	ldr	r2, [pc, #100]	@ (8006754 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a18      	ldr	r2, [pc, #96]	@ (8006758 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d11c      	bne.n	8006736 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006706:	051b      	lsls	r3, r3, #20
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40013400 	.word	0x40013400

0800675c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <__NVIC_SetPriority>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	6039      	str	r1, [r7, #0]
 80067f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db0a      	blt.n	8006812 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	490c      	ldr	r1, [pc, #48]	@ (8006834 <__NVIC_SetPriority+0x4c>)
 8006802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006806:	0112      	lsls	r2, r2, #4
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	440b      	add	r3, r1
 800680c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006810:	e00a      	b.n	8006828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	4908      	ldr	r1, [pc, #32]	@ (8006838 <__NVIC_SetPriority+0x50>)
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	3b04      	subs	r3, #4
 8006820:	0112      	lsls	r2, r2, #4
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	440b      	add	r3, r1
 8006826:	761a      	strb	r2, [r3, #24]
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	e000e100 	.word	0xe000e100
 8006838:	e000ed00 	.word	0xe000ed00

0800683c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006840:	4b05      	ldr	r3, [pc, #20]	@ (8006858 <SysTick_Handler+0x1c>)
 8006842:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006844:	f001 fd46 	bl	80082d4 <xTaskGetSchedulerState>
 8006848:	4603      	mov	r3, r0
 800684a:	2b01      	cmp	r3, #1
 800684c:	d001      	beq.n	8006852 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800684e:	f002 fb3b 	bl	8008ec8 <xPortSysTickHandler>
  }
}
 8006852:	bf00      	nop
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	e000e010 	.word	0xe000e010

0800685c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006860:	2100      	movs	r1, #0
 8006862:	f06f 0004 	mvn.w	r0, #4
 8006866:	f7ff ffbf 	bl	80067e8 <__NVIC_SetPriority>
#endif
}
 800686a:	bf00      	nop
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006876:	f3ef 8305 	mrs	r3, IPSR
 800687a:	603b      	str	r3, [r7, #0]
  return(result);
 800687c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006882:	f06f 0305 	mvn.w	r3, #5
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	e00c      	b.n	80068a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800688a:	4b0a      	ldr	r3, [pc, #40]	@ (80068b4 <osKernelInitialize+0x44>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006892:	4b08      	ldr	r3, [pc, #32]	@ (80068b4 <osKernelInitialize+0x44>)
 8006894:	2201      	movs	r2, #1
 8006896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006898:	2300      	movs	r3, #0
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	e002      	b.n	80068a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
 80068a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068a4:	687b      	ldr	r3, [r7, #4]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000040c 	.word	0x2000040c

080068b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068be:	f3ef 8305 	mrs	r3, IPSR
 80068c2:	603b      	str	r3, [r7, #0]
  return(result);
 80068c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80068ca:	f06f 0305 	mvn.w	r3, #5
 80068ce:	607b      	str	r3, [r7, #4]
 80068d0:	e010      	b.n	80068f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <osKernelStart+0x48>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d109      	bne.n	80068ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068da:	f7ff ffbf 	bl	800685c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068de:	4b08      	ldr	r3, [pc, #32]	@ (8006900 <osKernelStart+0x48>)
 80068e0:	2202      	movs	r2, #2
 80068e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068e4:	f001 f892 	bl	8007a0c <vTaskStartScheduler>
      stat = osOK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	607b      	str	r3, [r7, #4]
 80068ec:	e002      	b.n	80068f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068f4:	687b      	ldr	r3, [r7, #4]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000040c 	.word	0x2000040c

08006904 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b08e      	sub	sp, #56	@ 0x38
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006914:	f3ef 8305 	mrs	r3, IPSR
 8006918:	617b      	str	r3, [r7, #20]
  return(result);
 800691a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800691c:	2b00      	cmp	r3, #0
 800691e:	d17e      	bne.n	8006a1e <osThreadNew+0x11a>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d07b      	beq.n	8006a1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006926:	2380      	movs	r3, #128	@ 0x80
 8006928:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800692a:	2318      	movs	r3, #24
 800692c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006932:	f04f 33ff 	mov.w	r3, #4294967295
 8006936:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d045      	beq.n	80069ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <osThreadNew+0x48>
        name = attr->name;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <osThreadNew+0x6e>
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	2b38      	cmp	r3, #56	@ 0x38
 8006964:	d805      	bhi.n	8006972 <osThreadNew+0x6e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <osThreadNew+0x72>
        return (NULL);
 8006972:	2300      	movs	r3, #0
 8006974:	e054      	b.n	8006a20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	089b      	lsrs	r3, r3, #2
 8006984:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <osThreadNew+0xa8>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	2ba7      	cmp	r3, #167	@ 0xa7
 8006994:	d90a      	bls.n	80069ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800699a:	2b00      	cmp	r3, #0
 800699c:	d006      	beq.n	80069ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <osThreadNew+0xa8>
        mem = 1;
 80069a6:	2301      	movs	r3, #1
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	e010      	b.n	80069ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10c      	bne.n	80069ce <osThreadNew+0xca>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d108      	bne.n	80069ce <osThreadNew+0xca>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <osThreadNew+0xca>
          mem = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	e001      	b.n	80069ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d110      	bne.n	80069f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069dc:	9202      	str	r2, [sp, #8]
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fe1a 	bl	8007624 <xTaskCreateStatic>
 80069f0:	4603      	mov	r3, r0
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	e013      	b.n	8006a1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d110      	bne.n	8006a1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f107 0310 	add.w	r3, r7, #16
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fe68 	bl	80076e4 <xTaskCreate>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d001      	beq.n	8006a1e <osThreadNew+0x11a>
            hTask = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a1e:	693b      	ldr	r3, [r7, #16]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3728      	adds	r7, #40	@ 0x28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a30:	f3ef 8305 	mrs	r3, IPSR
 8006a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <osDelay+0x1c>
    stat = osErrorISR;
 8006a3c:	f06f 0305 	mvn.w	r3, #5
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e007      	b.n	8006a54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 ffa6 	bl	80079a0 <vTaskDelay>
    }
  }

  return (stat);
 8006a54:	68fb      	ldr	r3, [r7, #12]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a07      	ldr	r2, [pc, #28]	@ (8006a8c <vApplicationGetIdleTaskMemory+0x2c>)
 8006a70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a06      	ldr	r2, [pc, #24]	@ (8006a90 <vApplicationGetIdleTaskMemory+0x30>)
 8006a76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2280      	movs	r2, #128	@ 0x80
 8006a7c:	601a      	str	r2, [r3, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20000410 	.word	0x20000410
 8006a90:	200004b8 	.word	0x200004b8

08006a94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a07      	ldr	r2, [pc, #28]	@ (8006ac0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006aa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4a06      	ldr	r2, [pc, #24]	@ (8006ac4 <vApplicationGetTimerTaskMemory+0x30>)
 8006aaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	200006b8 	.word	0x200006b8
 8006ac4:	20000760 	.word	0x20000760

08006ac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f103 0208 	add.w	r2, r3, #8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f103 0208 	add.w	r2, r3, #8
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f103 0208 	add.w	r2, r3, #8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d103      	bne.n	8006b8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e00c      	b.n	8006ba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e002      	b.n	8006b98 <vListInsert+0x2e>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d2f6      	bcs.n	8006b92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	601a      	str	r2, [r3, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6892      	ldr	r2, [r2, #8]
 8006bf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6852      	ldr	r2, [r2, #4]
 8006bfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d103      	bne.n	8006c10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	1e5a      	subs	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c5c:	f002 f8a4 	bl	8008da8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	441a      	add	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	441a      	add	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	22ff      	movs	r2, #255	@ 0xff
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	22ff      	movs	r2, #255	@ 0xff
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d114      	bne.n	8006cdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01a      	beq.n	8006cf0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 f942 	bl	8007f48 <xTaskRemoveFromEventList>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <xQueueGenericReset+0xd0>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	e009      	b.n	8006cf0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3310      	adds	r3, #16
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fef1 	bl	8006ac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3324      	adds	r3, #36	@ 0x24
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff feec 	bl	8006ac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cf0:	f002 f88c 	bl	8008e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cf4:	2301      	movs	r3, #1
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	@ 0x38
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10b      	bne.n	8006d30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <xQueueGenericCreateStatic+0x56>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <xQueueGenericCreateStatic+0x5a>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <xQueueGenericCreateStatic+0x5c>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	623b      	str	r3, [r7, #32]
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <xQueueGenericCreateStatic+0x84>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <xQueueGenericCreateStatic+0x88>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <xQueueGenericCreateStatic+0x8a>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10b      	bne.n	8006daa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	61fb      	str	r3, [r7, #28]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006daa:	2350      	movs	r3, #80	@ 0x50
 8006dac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b50      	cmp	r3, #80	@ 0x50
 8006db2:	d00b      	beq.n	8006dcc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	61bb      	str	r3, [r7, #24]
}
 8006dc6:	bf00      	nop
 8006dc8:	bf00      	nop
 8006dca:	e7fd      	b.n	8006dc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dcc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006de0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4613      	mov	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f805 	bl	8006dfe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3730      	adds	r7, #48	@ 0x30
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e002      	b.n	8006e20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	69b8      	ldr	r0, [r7, #24]
 8006e30:	f7ff fefe 	bl	8006c30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08e      	sub	sp, #56	@ 0x38
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e52:	2300      	movs	r3, #0
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10b      	bne.n	8006e78 <xQueueGenericSend+0x34>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x42>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <xQueueGenericSend+0x46>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <xQueueGenericSend+0x48>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <xQueueGenericSend+0x64>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d103      	bne.n	8006eb6 <xQueueGenericSend+0x72>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <xQueueGenericSend+0x76>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <xQueueGenericSend+0x78>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <xQueueGenericSend+0x94>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	623b      	str	r3, [r7, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ed8:	f001 f9fc 	bl	80082d4 <xTaskGetSchedulerState>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <xQueueGenericSend+0xa4>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <xQueueGenericSend+0xa8>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <xQueueGenericSend+0xaa>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <xQueueGenericSend+0xc6>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	61fb      	str	r3, [r7, #28]
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	e7fd      	b.n	8006f06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f0a:	f001 ff4d 	bl	8008da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <xQueueGenericSend+0xdc>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d129      	bne.n	8006f74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f26:	f000 fa0f 	bl	8007348 <prvCopyDataToQueue>
 8006f2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d010      	beq.n	8006f56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	3324      	adds	r3, #36	@ 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 f805 	bl	8007f48 <xTaskRemoveFromEventList>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d013      	beq.n	8006f6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f44:	4b3f      	ldr	r3, [pc, #252]	@ (8007044 <xQueueGenericSend+0x200>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	e00a      	b.n	8006f6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f5c:	4b39      	ldr	r3, [pc, #228]	@ (8007044 <xQueueGenericSend+0x200>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f6c:	f001 ff4e 	bl	8008e0c <vPortExitCritical>
				return pdPASS;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e063      	b.n	800703c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f7a:	f001 ff47 	bl	8008e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e05c      	b.n	800703c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f88:	f107 0314 	add.w	r3, r7, #20
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 f83f 	bl	8008010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f92:	2301      	movs	r3, #1
 8006f94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f96:	f001 ff39 	bl	8008e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f9a:	f000 fda7 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f9e:	f001 ff03 	bl	8008da8 <vPortEnterCritical>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fa8:	b25b      	sxtb	r3, r3
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fae:	d103      	bne.n	8006fb8 <xQueueGenericSend+0x174>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d103      	bne.n	8006fce <xQueueGenericSend+0x18a>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fce:	f001 ff1d 	bl	8008e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fd2:	1d3a      	adds	r2, r7, #4
 8006fd4:	f107 0314 	add.w	r3, r7, #20
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f82e 	bl	800803c <xTaskCheckForTimeOut>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d124      	bne.n	8007030 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fe6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fe8:	f000 faa6 	bl	8007538 <prvIsQueueFull>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 ff52 	bl	8007ea4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007002:	f000 fa31 	bl	8007468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007006:	f000 fd7f 	bl	8007b08 <xTaskResumeAll>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	f47f af7c 	bne.w	8006f0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007012:	4b0c      	ldr	r3, [pc, #48]	@ (8007044 <xQueueGenericSend+0x200>)
 8007014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	e772      	b.n	8006f0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007026:	f000 fa1f 	bl	8007468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800702a:	f000 fd6d 	bl	8007b08 <xTaskResumeAll>
 800702e:	e76c      	b.n	8006f0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007032:	f000 fa19 	bl	8007468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007036:	f000 fd67 	bl	8007b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800703a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800703c:	4618      	mov	r0, r3
 800703e:	3738      	adds	r7, #56	@ 0x38
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b090      	sub	sp, #64	@ 0x40
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d103      	bne.n	8007086 <xQueueGenericSendFromISR+0x3e>
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <xQueueGenericSendFromISR+0x42>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <xQueueGenericSendFromISR+0x44>
 800708a:	2300      	movs	r3, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d103      	bne.n	80070b6 <xQueueGenericSendFromISR+0x6e>
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <xQueueGenericSendFromISR+0x72>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <xQueueGenericSendFromISR+0x74>
 80070ba:	2300      	movs	r3, #0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	623b      	str	r3, [r7, #32]
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070d8:	f001 ff46 	bl	8008f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070dc:	f3ef 8211 	mrs	r2, BASEPRI
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	61fa      	str	r2, [r7, #28]
 80070f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007100:	429a      	cmp	r2, r3
 8007102:	d302      	bcc.n	800710a <xQueueGenericSendFromISR+0xc2>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d12f      	bne.n	800716a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007110:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007118:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007120:	f000 f912 	bl	8007348 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007124:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712c:	d112      	bne.n	8007154 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d016      	beq.n	8007164 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	3324      	adds	r3, #36	@ 0x24
 800713a:	4618      	mov	r0, r3
 800713c:	f000 ff04 	bl	8007f48 <xTaskRemoveFromEventList>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e007      	b.n	8007164 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007154:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007158:	3301      	adds	r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	b25a      	sxtb	r2, r3
 800715e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007164:	2301      	movs	r3, #1
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007168:	e001      	b.n	800716e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800716a:	2300      	movs	r3, #0
 800716c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800716e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007170:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007178:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800717a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800717c:	4618      	mov	r0, r3
 800717e:	3740      	adds	r7, #64	@ 0x40
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08c      	sub	sp, #48	@ 0x30
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007190:	2300      	movs	r3, #0
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <xQueueReceive+0x32>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	623b      	str	r3, [r7, #32]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <xQueueReceive+0x40>
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <xQueueReceive+0x44>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <xQueueReceive+0x46>
 80071c8:	2300      	movs	r3, #0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <xQueueReceive+0x62>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	61fb      	str	r3, [r7, #28]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071e6:	f001 f875 	bl	80082d4 <xTaskGetSchedulerState>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <xQueueReceive+0x72>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <xQueueReceive+0x76>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <xQueueReceive+0x78>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <xQueueReceive+0x94>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	61bb      	str	r3, [r7, #24]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007218:	f001 fdc6 	bl	8008da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01f      	beq.n	8007268 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800722c:	f000 f8f6 	bl	800741c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00f      	beq.n	8007260 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	3310      	adds	r3, #16
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fe7f 	bl	8007f48 <xTaskRemoveFromEventList>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007250:	4b3c      	ldr	r3, [pc, #240]	@ (8007344 <xQueueReceive+0x1c0>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007260:	f001 fdd4 	bl	8008e0c <vPortExitCritical>
				return pdPASS;
 8007264:	2301      	movs	r3, #1
 8007266:	e069      	b.n	800733c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800726e:	f001 fdcd 	bl	8008e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007272:	2300      	movs	r3, #0
 8007274:	e062      	b.n	800733c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800727c:	f107 0310 	add.w	r3, r7, #16
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fec5 	bl	8008010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800728a:	f001 fdbf 	bl	8008e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800728e:	f000 fc2d 	bl	8007aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007292:	f001 fd89 	bl	8008da8 <vPortEnterCritical>
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800729c:	b25b      	sxtb	r3, r3
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	d103      	bne.n	80072ac <xQueueReceive+0x128>
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072b2:	b25b      	sxtb	r3, r3
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d103      	bne.n	80072c2 <xQueueReceive+0x13e>
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072c2:	f001 fda3 	bl	8008e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072c6:	1d3a      	adds	r2, r7, #4
 80072c8:	f107 0310 	add.w	r3, r7, #16
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 feb4 	bl	800803c <xTaskCheckForTimeOut>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d123      	bne.n	8007322 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072dc:	f000 f916 	bl	800750c <prvIsQueueEmpty>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d017      	beq.n	8007316 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e8:	3324      	adds	r3, #36	@ 0x24
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	4611      	mov	r1, r2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fdd8 	bl	8007ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072f6:	f000 f8b7 	bl	8007468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072fa:	f000 fc05 	bl	8007b08 <xTaskResumeAll>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d189      	bne.n	8007218 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007304:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <xQueueReceive+0x1c0>)
 8007306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	e780      	b.n	8007218 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007318:	f000 f8a6 	bl	8007468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800731c:	f000 fbf4 	bl	8007b08 <xTaskResumeAll>
 8007320:	e77a      	b.n	8007218 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007324:	f000 f8a0 	bl	8007468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007328:	f000 fbee 	bl	8007b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800732c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800732e:	f000 f8ed 	bl	800750c <prvIsQueueEmpty>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	f43f af6f 	beq.w	8007218 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800733a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800733c:	4618      	mov	r0, r3
 800733e:	3730      	adds	r7, #48	@ 0x30
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10d      	bne.n	8007382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d14d      	bne.n	800740a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 ffcc 	bl	8008310 <xTaskPriorityDisinherit>
 8007378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	e043      	b.n	800740a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d119      	bne.n	80073bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6858      	ldr	r0, [r3, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	461a      	mov	r2, r3
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	f002 f89c 	bl	80094d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d32b      	bcc.n	800740a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	605a      	str	r2, [r3, #4]
 80073ba:	e026      	b.n	800740a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68d8      	ldr	r0, [r3, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	461a      	mov	r2, r3
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	f002 f882 	bl	80094d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d4:	425b      	negs	r3, r3
 80073d6:	441a      	add	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d207      	bcs.n	80073f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	425b      	negs	r3, r3
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d105      	bne.n	800740a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	3b01      	subs	r3, #1
 8007408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007412:	697b      	ldr	r3, [r7, #20]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d018      	beq.n	8007460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	441a      	add	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	d303      	bcc.n	8007450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68d9      	ldr	r1, [r3, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007458:	461a      	mov	r2, r3
 800745a:	6838      	ldr	r0, [r7, #0]
 800745c:	f002 f838 	bl	80094d0 <memcpy>
	}
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007470:	f001 fc9a 	bl	8008da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800747a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800747c:	e011      	b.n	80074a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007482:	2b00      	cmp	r3, #0
 8007484:	d012      	beq.n	80074ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3324      	adds	r3, #36	@ 0x24
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fd5c 	bl	8007f48 <xTaskRemoveFromEventList>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007496:	f000 fe35 	bl	8008104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	3b01      	subs	r3, #1
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dce9      	bgt.n	800747e <prvUnlockQueue+0x16>
 80074aa:	e000      	b.n	80074ae <prvUnlockQueue+0x46>
					break;
 80074ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	22ff      	movs	r2, #255	@ 0xff
 80074b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074b6:	f001 fca9 	bl	8008e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074ba:	f001 fc75 	bl	8008da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074c6:	e011      	b.n	80074ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d012      	beq.n	80074f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3310      	adds	r3, #16
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fd37 	bl	8007f48 <xTaskRemoveFromEventList>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074e0:	f000 fe10 	bl	8008104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dce9      	bgt.n	80074c8 <prvUnlockQueue+0x60>
 80074f4:	e000      	b.n	80074f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	22ff      	movs	r2, #255	@ 0xff
 80074fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007500:	f001 fc84 	bl	8008e0c <vPortExitCritical>
}
 8007504:	bf00      	nop
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007514:	f001 fc48 	bl	8008da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	e001      	b.n	800752a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800752a:	f001 fc6f 	bl	8008e0c <vPortExitCritical>

	return xReturn;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007540:	f001 fc32 	bl	8008da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754c:	429a      	cmp	r2, r3
 800754e:	d102      	bne.n	8007556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e001      	b.n	800755a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800755a:	f001 fc57 	bl	8008e0c <vPortExitCritical>

	return xReturn;
 800755e:	68fb      	ldr	r3, [r7, #12]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e014      	b.n	80075a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007578:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <vQueueAddToRegistry+0x50>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007584:	490c      	ldr	r1, [pc, #48]	@ (80075b8 <vQueueAddToRegistry+0x50>)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800758e:	4a0a      	ldr	r2, [pc, #40]	@ (80075b8 <vQueueAddToRegistry+0x50>)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800759a:	e006      	b.n	80075aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b07      	cmp	r3, #7
 80075a6:	d9e7      	bls.n	8007578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000b60 	.word	0x20000b60

080075bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075cc:	f001 fbec 	bl	8008da8 <vPortEnterCritical>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075d6:	b25b      	sxtb	r3, r3
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d103      	bne.n	80075e6 <vQueueWaitForMessageRestricted+0x2a>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075ec:	b25b      	sxtb	r3, r3
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d103      	bne.n	80075fc <vQueueWaitForMessageRestricted+0x40>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075fc:	f001 fc06 	bl	8008e0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3324      	adds	r3, #36	@ 0x24
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fc6d 	bl	8007ef0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007616:	6978      	ldr	r0, [r7, #20]
 8007618:	f7ff ff26 	bl	8007468 <prvUnlockQueue>
	}
 800761c:	bf00      	nop
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08e      	sub	sp, #56	@ 0x38
 8007628:	af04      	add	r7, sp, #16
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	623b      	str	r3, [r7, #32]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	61fb      	str	r3, [r7, #28]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800766e:	23a8      	movs	r3, #168	@ 0xa8
 8007670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2ba8      	cmp	r3, #168	@ 0xa8
 8007676:	d00b      	beq.n	8007690 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61bb      	str	r3, [r7, #24]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007690:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01e      	beq.n	80076d6 <xTaskCreateStatic+0xb2>
 8007698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01b      	beq.n	80076d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076b0:	2300      	movs	r3, #0
 80076b2:	9303      	str	r3, [sp, #12]
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	9302      	str	r3, [sp, #8]
 80076b8:	f107 0314 	add.w	r3, r7, #20
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f851 	bl	8007770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076d0:	f000 f8f6 	bl	80078c0 <prvAddNewTaskToReadyList>
 80076d4:	e001      	b.n	80076da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076da:	697b      	ldr	r3, [r7, #20]
	}
 80076dc:	4618      	mov	r0, r3
 80076de:	3728      	adds	r7, #40	@ 0x28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08c      	sub	sp, #48	@ 0x30
 80076e8:	af04      	add	r7, sp, #16
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076f4:	88fb      	ldrh	r3, [r7, #6]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 fc77 	bl	8008fec <pvPortMalloc>
 80076fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00e      	beq.n	8007724 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007706:	20a8      	movs	r0, #168	@ 0xa8
 8007708:	f001 fc70 	bl	8008fec <pvPortMalloc>
 800770c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30
 800771a:	e005      	b.n	8007728 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800771c:	6978      	ldr	r0, [r7, #20]
 800771e:	f001 fd33 	bl	8009188 <vPortFree>
 8007722:	e001      	b.n	8007728 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d017      	beq.n	800775e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	2300      	movs	r3, #0
 800773a:	9303      	str	r3, [sp, #12]
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	9302      	str	r3, [sp, #8]
 8007740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f80f 	bl	8007770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007752:	69f8      	ldr	r0, [r7, #28]
 8007754:	f000 f8b4 	bl	80078c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007758:	2301      	movs	r3, #1
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	e002      	b.n	8007764 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800775e:	f04f 33ff 	mov.w	r3, #4294967295
 8007762:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007764:	69bb      	ldr	r3, [r7, #24]
	}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	461a      	mov	r2, r3
 8007788:	21a5      	movs	r1, #165	@ 0xa5
 800778a:	f001 fe1d 	bl	80093c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007798:	3b01      	subs	r3, #1
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	617b      	str	r3, [r7, #20]
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01f      	beq.n	8007810 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	e012      	b.n	80077fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	7819      	ldrb	r1, [r3, #0]
 80077de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	3334      	adds	r3, #52	@ 0x34
 80077e6:	460a      	mov	r2, r1
 80077e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d006      	beq.n	8007804 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	3301      	adds	r3, #1
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2b0f      	cmp	r3, #15
 8007800:	d9e9      	bls.n	80077d6 <prvInitialiseNewTask+0x66>
 8007802:	e000      	b.n	8007806 <prvInitialiseNewTask+0x96>
			{
				break;
 8007804:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800780e:	e003      	b.n	8007818 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781a:	2b37      	cmp	r3, #55	@ 0x37
 800781c:	d901      	bls.n	8007822 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800781e:	2337      	movs	r3, #55	@ 0x37
 8007820:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007826:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800782c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	2200      	movs	r2, #0
 8007832:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	3304      	adds	r3, #4
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff f965 	bl	8006b08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	3318      	adds	r3, #24
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff f960 	bl	8006b08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800784c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	2200      	movs	r2, #0
 800786a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	3354      	adds	r3, #84	@ 0x54
 8007872:	224c      	movs	r2, #76	@ 0x4c
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f001 fda6 	bl	80093c8 <memset>
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	4a0d      	ldr	r2, [pc, #52]	@ (80078b4 <prvInitialiseNewTask+0x144>)
 8007880:	659a      	str	r2, [r3, #88]	@ 0x58
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	4a0c      	ldr	r2, [pc, #48]	@ (80078b8 <prvInitialiseNewTask+0x148>)
 8007886:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	4a0c      	ldr	r2, [pc, #48]	@ (80078bc <prvInitialiseNewTask+0x14c>)
 800788c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	68f9      	ldr	r1, [r7, #12]
 8007892:	69b8      	ldr	r0, [r7, #24]
 8007894:	f001 f95a 	bl	8008b4c <pxPortInitialiseStack>
 8007898:	4602      	mov	r2, r0
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078aa:	bf00      	nop
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20001df4 	.word	0x20001df4
 80078b8:	20001e5c 	.word	0x20001e5c
 80078bc:	20001ec4 	.word	0x20001ec4

080078c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078c8:	f001 fa6e 	bl	8008da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007984 <prvAddNewTaskToReadyList+0xc4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007984 <prvAddNewTaskToReadyList+0xc4>)
 80078d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007988 <prvAddNewTaskToReadyList+0xc8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078de:	4a2a      	ldr	r2, [pc, #168]	@ (8007988 <prvAddNewTaskToReadyList+0xc8>)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078e4:	4b27      	ldr	r3, [pc, #156]	@ (8007984 <prvAddNewTaskToReadyList+0xc4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d110      	bne.n	800790e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078ec:	f000 fc2e 	bl	800814c <prvInitialiseTaskLists>
 80078f0:	e00d      	b.n	800790e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078f2:	4b26      	ldr	r3, [pc, #152]	@ (800798c <prvAddNewTaskToReadyList+0xcc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078fa:	4b23      	ldr	r3, [pc, #140]	@ (8007988 <prvAddNewTaskToReadyList+0xc8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	429a      	cmp	r2, r3
 8007906:	d802      	bhi.n	800790e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007908:	4a1f      	ldr	r2, [pc, #124]	@ (8007988 <prvAddNewTaskToReadyList+0xc8>)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800790e:	4b20      	ldr	r3, [pc, #128]	@ (8007990 <prvAddNewTaskToReadyList+0xd0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	4a1e      	ldr	r2, [pc, #120]	@ (8007990 <prvAddNewTaskToReadyList+0xd0>)
 8007916:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007918:	4b1d      	ldr	r3, [pc, #116]	@ (8007990 <prvAddNewTaskToReadyList+0xd0>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007924:	4b1b      	ldr	r3, [pc, #108]	@ (8007994 <prvAddNewTaskToReadyList+0xd4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d903      	bls.n	8007934 <prvAddNewTaskToReadyList+0x74>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	4a18      	ldr	r2, [pc, #96]	@ (8007994 <prvAddNewTaskToReadyList+0xd4>)
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4a15      	ldr	r2, [pc, #84]	@ (8007998 <prvAddNewTaskToReadyList+0xd8>)
 8007942:	441a      	add	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f7ff f8e9 	bl	8006b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007950:	f001 fa5c 	bl	8008e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007954:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <prvAddNewTaskToReadyList+0xcc>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00e      	beq.n	800797a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800795c:	4b0a      	ldr	r3, [pc, #40]	@ (8007988 <prvAddNewTaskToReadyList+0xc8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	429a      	cmp	r2, r3
 8007968:	d207      	bcs.n	800797a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800796a:	4b0c      	ldr	r3, [pc, #48]	@ (800799c <prvAddNewTaskToReadyList+0xdc>)
 800796c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20001074 	.word	0x20001074
 8007988:	20000ba0 	.word	0x20000ba0
 800798c:	20001080 	.word	0x20001080
 8007990:	20001090 	.word	0x20001090
 8007994:	2000107c 	.word	0x2000107c
 8007998:	20000ba4 	.word	0x20000ba4
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d018      	beq.n	80079e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079b2:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <vTaskDelay+0x64>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <vTaskDelay+0x32>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60bb      	str	r3, [r7, #8]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079d2:	f000 f88b 	bl	8007aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fd09 	bl	80083f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079de:	f000 f893 	bl	8007b08 <xTaskResumeAll>
 80079e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d107      	bne.n	80079fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80079ea:	4b07      	ldr	r3, [pc, #28]	@ (8007a08 <vTaskDelay+0x68>)
 80079ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	2000109c 	.word	0x2000109c
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	@ 0x28
 8007a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	1d39      	adds	r1, r7, #4
 8007a1e:	f107 0308 	add.w	r3, r7, #8
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff f81c 	bl	8006a60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	9202      	str	r2, [sp, #8]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	2300      	movs	r3, #0
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	2300      	movs	r3, #0
 8007a38:	460a      	mov	r2, r1
 8007a3a:	4924      	ldr	r1, [pc, #144]	@ (8007acc <vTaskStartScheduler+0xc0>)
 8007a3c:	4824      	ldr	r0, [pc, #144]	@ (8007ad0 <vTaskStartScheduler+0xc4>)
 8007a3e:	f7ff fdf1 	bl	8007624 <xTaskCreateStatic>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4a23      	ldr	r2, [pc, #140]	@ (8007ad4 <vTaskStartScheduler+0xc8>)
 8007a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a48:	4b22      	ldr	r3, [pc, #136]	@ (8007ad4 <vTaskStartScheduler+0xc8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a50:	2301      	movs	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e001      	b.n	8007a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d102      	bne.n	8007a66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a60:	f000 fd1a 	bl	8008498 <xTimerCreateTimerTask>
 8007a64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d11b      	bne.n	8007aa4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	613b      	str	r3, [r7, #16]
}
 8007a7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a80:	4b15      	ldr	r3, [pc, #84]	@ (8007ad8 <vTaskStartScheduler+0xcc>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3354      	adds	r3, #84	@ 0x54
 8007a86:	4a15      	ldr	r2, [pc, #84]	@ (8007adc <vTaskStartScheduler+0xd0>)
 8007a88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ae0 <vTaskStartScheduler+0xd4>)
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a92:	4b14      	ldr	r3, [pc, #80]	@ (8007ae4 <vTaskStartScheduler+0xd8>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a98:	4b13      	ldr	r3, [pc, #76]	@ (8007ae8 <vTaskStartScheduler+0xdc>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a9e:	f001 f8df 	bl	8008c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007aa2:	e00f      	b.n	8007ac4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d10b      	bne.n	8007ac4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60fb      	str	r3, [r7, #12]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <vTaskStartScheduler+0xb4>
}
 8007ac4:	bf00      	nop
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	080095e8 	.word	0x080095e8
 8007ad0:	0800811d 	.word	0x0800811d
 8007ad4:	20001098 	.word	0x20001098
 8007ad8:	20000ba0 	.word	0x20000ba0
 8007adc:	20000010 	.word	0x20000010
 8007ae0:	20001094 	.word	0x20001094
 8007ae4:	20001080 	.word	0x20001080
 8007ae8:	20001078 	.word	0x20001078

08007aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007af0:	4b04      	ldr	r3, [pc, #16]	@ (8007b04 <vTaskSuspendAll+0x18>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a03      	ldr	r2, [pc, #12]	@ (8007b04 <vTaskSuspendAll+0x18>)
 8007af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007afa:	bf00      	nop
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	2000109c 	.word	0x2000109c

08007b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b16:	4b42      	ldr	r3, [pc, #264]	@ (8007c20 <xTaskResumeAll+0x118>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <xTaskResumeAll+0x2e>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	603b      	str	r3, [r7, #0]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b36:	f001 f937 	bl	8008da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b3a:	4b39      	ldr	r3, [pc, #228]	@ (8007c20 <xTaskResumeAll+0x118>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	4a37      	ldr	r2, [pc, #220]	@ (8007c20 <xTaskResumeAll+0x118>)
 8007b42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b44:	4b36      	ldr	r3, [pc, #216]	@ (8007c20 <xTaskResumeAll+0x118>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d162      	bne.n	8007c12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b4c:	4b35      	ldr	r3, [pc, #212]	@ (8007c24 <xTaskResumeAll+0x11c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d05e      	beq.n	8007c12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b54:	e02f      	b.n	8007bb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b56:	4b34      	ldr	r3, [pc, #208]	@ (8007c28 <xTaskResumeAll+0x120>)
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3318      	adds	r3, #24
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff f83a 	bl	8006bdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff f835 	bl	8006bdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b76:	4b2d      	ldr	r3, [pc, #180]	@ (8007c2c <xTaskResumeAll+0x124>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d903      	bls.n	8007b86 <xTaskResumeAll+0x7e>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b82:	4a2a      	ldr	r2, [pc, #168]	@ (8007c2c <xTaskResumeAll+0x124>)
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4a27      	ldr	r2, [pc, #156]	@ (8007c30 <xTaskResumeAll+0x128>)
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f7fe ffc0 	bl	8006b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba6:	4b23      	ldr	r3, [pc, #140]	@ (8007c34 <xTaskResumeAll+0x12c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007bb0:	4b21      	ldr	r3, [pc, #132]	@ (8007c38 <xTaskResumeAll+0x130>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c28 <xTaskResumeAll+0x120>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1cb      	bne.n	8007b56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bc4:	f000 fb66 	bl	8008294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8007c3c <xTaskResumeAll+0x134>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d010      	beq.n	8007bf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bd4:	f000 f846 	bl	8007c64 <xTaskIncrementTick>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007bde:	4b16      	ldr	r3, [pc, #88]	@ (8007c38 <xTaskResumeAll+0x130>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1f1      	bne.n	8007bd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007bf0:	4b12      	ldr	r3, [pc, #72]	@ (8007c3c <xTaskResumeAll+0x134>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bf6:	4b10      	ldr	r3, [pc, #64]	@ (8007c38 <xTaskResumeAll+0x130>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d009      	beq.n	8007c12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c02:	4b0f      	ldr	r3, [pc, #60]	@ (8007c40 <xTaskResumeAll+0x138>)
 8007c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c12:	f001 f8fb 	bl	8008e0c <vPortExitCritical>

	return xAlreadyYielded;
 8007c16:	68bb      	ldr	r3, [r7, #8]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	2000109c 	.word	0x2000109c
 8007c24:	20001074 	.word	0x20001074
 8007c28:	20001034 	.word	0x20001034
 8007c2c:	2000107c 	.word	0x2000107c
 8007c30:	20000ba4 	.word	0x20000ba4
 8007c34:	20000ba0 	.word	0x20000ba0
 8007c38:	20001088 	.word	0x20001088
 8007c3c:	20001084 	.word	0x20001084
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c4a:	4b05      	ldr	r3, [pc, #20]	@ (8007c60 <xTaskGetTickCount+0x1c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c50:	687b      	ldr	r3, [r7, #4]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20001078 	.word	0x20001078

08007c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007dac <xTaskIncrementTick+0x148>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f040 8090 	bne.w	8007d98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c78:	4b4d      	ldr	r3, [pc, #308]	@ (8007db0 <xTaskIncrementTick+0x14c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c80:	4a4b      	ldr	r2, [pc, #300]	@ (8007db0 <xTaskIncrementTick+0x14c>)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d121      	bne.n	8007cd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c8c:	4b49      	ldr	r3, [pc, #292]	@ (8007db4 <xTaskIncrementTick+0x150>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	603b      	str	r3, [r7, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xTaskIncrementTick+0x46>
 8007cae:	4b41      	ldr	r3, [pc, #260]	@ (8007db4 <xTaskIncrementTick+0x150>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	4b40      	ldr	r3, [pc, #256]	@ (8007db8 <xTaskIncrementTick+0x154>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8007db4 <xTaskIncrementTick+0x150>)
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8007db8 <xTaskIncrementTick+0x154>)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8007dbc <xTaskIncrementTick+0x158>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8007dbc <xTaskIncrementTick+0x158>)
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	f000 fae2 	bl	8008294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8007dc0 <xTaskIncrementTick+0x15c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d349      	bcc.n	8007d6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cda:	4b36      	ldr	r3, [pc, #216]	@ (8007db4 <xTaskIncrementTick+0x150>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce4:	4b36      	ldr	r3, [pc, #216]	@ (8007dc0 <xTaskIncrementTick+0x15c>)
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	601a      	str	r2, [r3, #0]
					break;
 8007cec:	e03f      	b.n	8007d6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cee:	4b31      	ldr	r3, [pc, #196]	@ (8007db4 <xTaskIncrementTick+0x150>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d203      	bcs.n	8007d0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d06:	4a2e      	ldr	r2, [pc, #184]	@ (8007dc0 <xTaskIncrementTick+0x15c>)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d0c:	e02f      	b.n	8007d6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe ff62 	bl	8006bdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3318      	adds	r3, #24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe ff59 	bl	8006bdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2e:	4b25      	ldr	r3, [pc, #148]	@ (8007dc4 <xTaskIncrementTick+0x160>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d903      	bls.n	8007d3e <xTaskIncrementTick+0xda>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	4a22      	ldr	r2, [pc, #136]	@ (8007dc4 <xTaskIncrementTick+0x160>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc8 <xTaskIncrementTick+0x164>)
 8007d4c:	441a      	add	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7fe fee4 	bl	8006b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dcc <xTaskIncrementTick+0x168>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d3b8      	bcc.n	8007cda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d6c:	e7b5      	b.n	8007cda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d6e:	4b17      	ldr	r3, [pc, #92]	@ (8007dcc <xTaskIncrementTick+0x168>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d74:	4914      	ldr	r1, [pc, #80]	@ (8007dc8 <xTaskIncrementTick+0x164>)
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d901      	bls.n	8007d8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d8a:	4b11      	ldr	r3, [pc, #68]	@ (8007dd0 <xTaskIncrementTick+0x16c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e004      	b.n	8007da2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d98:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd4 <xTaskIncrementTick+0x170>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd4 <xTaskIncrementTick+0x170>)
 8007da0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007da2:	697b      	ldr	r3, [r7, #20]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	2000109c 	.word	0x2000109c
 8007db0:	20001078 	.word	0x20001078
 8007db4:	2000102c 	.word	0x2000102c
 8007db8:	20001030 	.word	0x20001030
 8007dbc:	2000108c 	.word	0x2000108c
 8007dc0:	20001094 	.word	0x20001094
 8007dc4:	2000107c 	.word	0x2000107c
 8007dc8:	20000ba4 	.word	0x20000ba4
 8007dcc:	20000ba0 	.word	0x20000ba0
 8007dd0:	20001088 	.word	0x20001088
 8007dd4:	20001084 	.word	0x20001084

08007dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dde:	4b2b      	ldr	r3, [pc, #172]	@ (8007e8c <vTaskSwitchContext+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007de6:	4b2a      	ldr	r3, [pc, #168]	@ (8007e90 <vTaskSwitchContext+0xb8>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dec:	e047      	b.n	8007e7e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007dee:	4b28      	ldr	r3, [pc, #160]	@ (8007e90 <vTaskSwitchContext+0xb8>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	4b27      	ldr	r3, [pc, #156]	@ (8007e94 <vTaskSwitchContext+0xbc>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	e011      	b.n	8007e20 <vTaskSwitchContext+0x48>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <vTaskSwitchContext+0x42>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	607b      	str	r3, [r7, #4]
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	e7fd      	b.n	8007e16 <vTaskSwitchContext+0x3e>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	491d      	ldr	r1, [pc, #116]	@ (8007e98 <vTaskSwitchContext+0xc0>)
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0e3      	beq.n	8007dfc <vTaskSwitchContext+0x24>
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4a16      	ldr	r2, [pc, #88]	@ (8007e98 <vTaskSwitchContext+0xc0>)
 8007e40:	4413      	add	r3, r2
 8007e42:	60bb      	str	r3, [r7, #8]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	3308      	adds	r3, #8
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d104      	bne.n	8007e64 <vTaskSwitchContext+0x8c>
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	605a      	str	r2, [r3, #4]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e9c <vTaskSwitchContext+0xc4>)
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	4a09      	ldr	r2, [pc, #36]	@ (8007e94 <vTaskSwitchContext+0xbc>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e74:	4b09      	ldr	r3, [pc, #36]	@ (8007e9c <vTaskSwitchContext+0xc4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3354      	adds	r3, #84	@ 0x54
 8007e7a:	4a09      	ldr	r2, [pc, #36]	@ (8007ea0 <vTaskSwitchContext+0xc8>)
 8007e7c:	6013      	str	r3, [r2, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2000109c 	.word	0x2000109c
 8007e90:	20001088 	.word	0x20001088
 8007e94:	2000107c 	.word	0x2000107c
 8007e98:	20000ba4 	.word	0x20000ba4
 8007e9c:	20000ba0 	.word	0x20000ba0
 8007ea0:	20000010 	.word	0x20000010

08007ea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ecc:	4b07      	ldr	r3, [pc, #28]	@ (8007eec <vTaskPlaceOnEventList+0x48>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3318      	adds	r3, #24
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7fe fe48 	bl	8006b6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eda:	2101      	movs	r1, #1
 8007edc:	6838      	ldr	r0, [r7, #0]
 8007ede:	f000 fa87 	bl	80083f0 <prvAddCurrentTaskToDelayedList>
}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000ba0 	.word	0x20000ba0

08007ef0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	617b      	str	r3, [r7, #20]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f44 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3318      	adds	r3, #24
 8007f20:	4619      	mov	r1, r3
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7fe fdfd 	bl	8006b22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	68b8      	ldr	r0, [r7, #8]
 8007f38:	f000 fa5a 	bl	80083f0 <prvAddCurrentTaskToDelayedList>
	}
 8007f3c:	bf00      	nop
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000ba0 	.word	0x20000ba0

08007f48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10b      	bne.n	8007f76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	60fb      	str	r3, [r7, #12]
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	e7fd      	b.n	8007f72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	3318      	adds	r3, #24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fe2e 	bl	8006bdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f80:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff8 <xTaskRemoveFromEventList+0xb0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11d      	bne.n	8007fc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe fe25 	bl	8006bdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f96:	4b19      	ldr	r3, [pc, #100]	@ (8007ffc <xTaskRemoveFromEventList+0xb4>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d903      	bls.n	8007fa6 <xTaskRemoveFromEventList+0x5e>
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa2:	4a16      	ldr	r2, [pc, #88]	@ (8007ffc <xTaskRemoveFromEventList+0xb4>)
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4a13      	ldr	r2, [pc, #76]	@ (8008000 <xTaskRemoveFromEventList+0xb8>)
 8007fb4:	441a      	add	r2, r3
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	f7fe fdb0 	bl	8006b22 <vListInsertEnd>
 8007fc2:	e005      	b.n	8007fd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	3318      	adds	r3, #24
 8007fc8:	4619      	mov	r1, r3
 8007fca:	480e      	ldr	r0, [pc, #56]	@ (8008004 <xTaskRemoveFromEventList+0xbc>)
 8007fcc:	f7fe fda9 	bl	8006b22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <xTaskRemoveFromEventList+0xc0>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d905      	bls.n	8007fea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800800c <xTaskRemoveFromEventList+0xc4>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	e001      	b.n	8007fee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fee:	697b      	ldr	r3, [r7, #20]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	2000109c 	.word	0x2000109c
 8007ffc:	2000107c 	.word	0x2000107c
 8008000:	20000ba4 	.word	0x20000ba4
 8008004:	20001034 	.word	0x20001034
 8008008:	20000ba0 	.word	0x20000ba0
 800800c:	20001088 	.word	0x20001088

08008010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008018:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <vTaskInternalSetTimeOutState+0x24>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008020:	4b05      	ldr	r3, [pc, #20]	@ (8008038 <vTaskInternalSetTimeOutState+0x28>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	605a      	str	r2, [r3, #4]
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	2000108c 	.word	0x2000108c
 8008038:	20001078 	.word	0x20001078

0800803c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10b      	bne.n	8008064 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	613b      	str	r3, [r7, #16]
}
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	60fb      	str	r3, [r7, #12]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008082:	f000 fe91 	bl	8008da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008086:	4b1d      	ldr	r3, [pc, #116]	@ (80080fc <xTaskCheckForTimeOut+0xc0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d102      	bne.n	80080a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	e023      	b.n	80080ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b15      	ldr	r3, [pc, #84]	@ (8008100 <xTaskCheckForTimeOut+0xc4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d007      	beq.n	80080c2 <xTaskCheckForTimeOut+0x86>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d302      	bcc.n	80080c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080bc:	2301      	movs	r3, #1
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	e015      	b.n	80080ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d20b      	bcs.n	80080e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	1ad2      	subs	r2, r2, r3
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ff99 	bl	8008010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	e004      	b.n	80080ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ee:	f000 fe8d 	bl	8008e0c <vPortExitCritical>

	return xReturn;
 80080f2:	69fb      	ldr	r3, [r7, #28]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20001078 	.word	0x20001078
 8008100:	2000108c 	.word	0x2000108c

08008104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008108:	4b03      	ldr	r3, [pc, #12]	@ (8008118 <vTaskMissedYield+0x14>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20001088 	.word	0x20001088

0800811c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008124:	f000 f852 	bl	80081cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008128:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <prvIdleTask+0x28>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d9f9      	bls.n	8008124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008130:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <prvIdleTask+0x2c>)
 8008132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008140:	e7f0      	b.n	8008124 <prvIdleTask+0x8>
 8008142:	bf00      	nop
 8008144:	20000ba4 	.word	0x20000ba4
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	e00c      	b.n	8008172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4a12      	ldr	r2, [pc, #72]	@ (80081ac <prvInitialiseTaskLists+0x60>)
 8008164:	4413      	add	r3, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fcae 	bl	8006ac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3301      	adds	r3, #1
 8008170:	607b      	str	r3, [r7, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b37      	cmp	r3, #55	@ 0x37
 8008176:	d9ef      	bls.n	8008158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008178:	480d      	ldr	r0, [pc, #52]	@ (80081b0 <prvInitialiseTaskLists+0x64>)
 800817a:	f7fe fca5 	bl	8006ac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800817e:	480d      	ldr	r0, [pc, #52]	@ (80081b4 <prvInitialiseTaskLists+0x68>)
 8008180:	f7fe fca2 	bl	8006ac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008184:	480c      	ldr	r0, [pc, #48]	@ (80081b8 <prvInitialiseTaskLists+0x6c>)
 8008186:	f7fe fc9f 	bl	8006ac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800818a:	480c      	ldr	r0, [pc, #48]	@ (80081bc <prvInitialiseTaskLists+0x70>)
 800818c:	f7fe fc9c 	bl	8006ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008190:	480b      	ldr	r0, [pc, #44]	@ (80081c0 <prvInitialiseTaskLists+0x74>)
 8008192:	f7fe fc99 	bl	8006ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008196:	4b0b      	ldr	r3, [pc, #44]	@ (80081c4 <prvInitialiseTaskLists+0x78>)
 8008198:	4a05      	ldr	r2, [pc, #20]	@ (80081b0 <prvInitialiseTaskLists+0x64>)
 800819a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800819c:	4b0a      	ldr	r3, [pc, #40]	@ (80081c8 <prvInitialiseTaskLists+0x7c>)
 800819e:	4a05      	ldr	r2, [pc, #20]	@ (80081b4 <prvInitialiseTaskLists+0x68>)
 80081a0:	601a      	str	r2, [r3, #0]
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000ba4 	.word	0x20000ba4
 80081b0:	20001004 	.word	0x20001004
 80081b4:	20001018 	.word	0x20001018
 80081b8:	20001034 	.word	0x20001034
 80081bc:	20001048 	.word	0x20001048
 80081c0:	20001060 	.word	0x20001060
 80081c4:	2000102c 	.word	0x2000102c
 80081c8:	20001030 	.word	0x20001030

080081cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081d2:	e019      	b.n	8008208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081d4:	f000 fde8 	bl	8008da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d8:	4b10      	ldr	r3, [pc, #64]	@ (800821c <prvCheckTasksWaitingTermination+0x50>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe fcf9 	bl	8006bdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008220 <prvCheckTasksWaitingTermination+0x54>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008220 <prvCheckTasksWaitingTermination+0x54>)
 80081f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008224 <prvCheckTasksWaitingTermination+0x58>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008224 <prvCheckTasksWaitingTermination+0x58>)
 80081fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081fe:	f000 fe05 	bl	8008e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f810 	bl	8008228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008208:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <prvCheckTasksWaitingTermination+0x58>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e1      	bne.n	80081d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20001048 	.word	0x20001048
 8008220:	20001074 	.word	0x20001074
 8008224:	2000105c 	.word	0x2000105c

08008228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3354      	adds	r3, #84	@ 0x54
 8008234:	4618      	mov	r0, r3
 8008236:	f001 f8cf 	bl	80093d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008240:	2b00      	cmp	r3, #0
 8008242:	d108      	bne.n	8008256 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008248:	4618      	mov	r0, r3
 800824a:	f000 ff9d 	bl	8009188 <vPortFree>
				vPortFree( pxTCB );
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 ff9a 	bl	8009188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008254:	e019      	b.n	800828a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800825c:	2b01      	cmp	r3, #1
 800825e:	d103      	bne.n	8008268 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 ff91 	bl	8009188 <vPortFree>
	}
 8008266:	e010      	b.n	800828a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800826e:	2b02      	cmp	r3, #2
 8008270:	d00b      	beq.n	800828a <prvDeleteTCB+0x62>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60fb      	str	r3, [r7, #12]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <prvDeleteTCB+0x5e>
	}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829a:	4b0c      	ldr	r3, [pc, #48]	@ (80082cc <prvResetNextTaskUnblockTime+0x38>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082a4:	4b0a      	ldr	r3, [pc, #40]	@ (80082d0 <prvResetNextTaskUnblockTime+0x3c>)
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082ac:	e008      	b.n	80082c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ae:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <prvResetNextTaskUnblockTime+0x38>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4a04      	ldr	r2, [pc, #16]	@ (80082d0 <prvResetNextTaskUnblockTime+0x3c>)
 80082be:	6013      	str	r3, [r2, #0]
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	2000102c 	.word	0x2000102c
 80082d0:	20001094 	.word	0x20001094

080082d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082da:	4b0b      	ldr	r3, [pc, #44]	@ (8008308 <xTaskGetSchedulerState+0x34>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082e2:	2301      	movs	r3, #1
 80082e4:	607b      	str	r3, [r7, #4]
 80082e6:	e008      	b.n	80082fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e8:	4b08      	ldr	r3, [pc, #32]	@ (800830c <xTaskGetSchedulerState+0x38>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082f0:	2302      	movs	r3, #2
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e001      	b.n	80082fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082f6:	2300      	movs	r3, #0
 80082f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082fa:	687b      	ldr	r3, [r7, #4]
	}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	20001080 	.word	0x20001080
 800830c:	2000109c 	.word	0x2000109c

08008310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d058      	beq.n	80083d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008326:	4b2f      	ldr	r3, [pc, #188]	@ (80083e4 <xTaskPriorityDisinherit+0xd4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	429a      	cmp	r2, r3
 800832e:	d00b      	beq.n	8008348 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60fb      	str	r3, [r7, #12]
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	e7fd      	b.n	8008344 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	60bb      	str	r3, [r7, #8]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800836c:	1e5a      	subs	r2, r3, #1
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837a:	429a      	cmp	r2, r3
 800837c:	d02c      	beq.n	80083d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008382:	2b00      	cmp	r3, #0
 8008384:	d128      	bne.n	80083d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3304      	adds	r3, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fc26 	bl	8006bdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a8:	4b0f      	ldr	r3, [pc, #60]	@ (80083e8 <xTaskPriorityDisinherit+0xd8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d903      	bls.n	80083b8 <xTaskPriorityDisinherit+0xa8>
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b4:	4a0c      	ldr	r2, [pc, #48]	@ (80083e8 <xTaskPriorityDisinherit+0xd8>)
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4a09      	ldr	r2, [pc, #36]	@ (80083ec <xTaskPriorityDisinherit+0xdc>)
 80083c6:	441a      	add	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f7fe fba7 	bl	8006b22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083d4:	2301      	movs	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083d8:	697b      	ldr	r3, [r7, #20]
	}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000ba0 	.word	0x20000ba0
 80083e8:	2000107c 	.word	0x2000107c
 80083ec:	20000ba4 	.word	0x20000ba4

080083f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083fa:	4b21      	ldr	r3, [pc, #132]	@ (8008480 <prvAddCurrentTaskToDelayedList+0x90>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008400:	4b20      	ldr	r3, [pc, #128]	@ (8008484 <prvAddCurrentTaskToDelayedList+0x94>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fbe8 	bl	8006bdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008412:	d10a      	bne.n	800842a <prvAddCurrentTaskToDelayedList+0x3a>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800841a:	4b1a      	ldr	r3, [pc, #104]	@ (8008484 <prvAddCurrentTaskToDelayedList+0x94>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4819      	ldr	r0, [pc, #100]	@ (8008488 <prvAddCurrentTaskToDelayedList+0x98>)
 8008424:	f7fe fb7d 	bl	8006b22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008428:	e026      	b.n	8008478 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4413      	add	r3, r2
 8008430:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008432:	4b14      	ldr	r3, [pc, #80]	@ (8008484 <prvAddCurrentTaskToDelayedList+0x94>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	429a      	cmp	r2, r3
 8008440:	d209      	bcs.n	8008456 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008442:	4b12      	ldr	r3, [pc, #72]	@ (800848c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	4b0f      	ldr	r3, [pc, #60]	@ (8008484 <prvAddCurrentTaskToDelayedList+0x94>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3304      	adds	r3, #4
 800844c:	4619      	mov	r1, r3
 800844e:	4610      	mov	r0, r2
 8008450:	f7fe fb8b 	bl	8006b6a <vListInsert>
}
 8008454:	e010      	b.n	8008478 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008456:	4b0e      	ldr	r3, [pc, #56]	@ (8008490 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	4b0a      	ldr	r3, [pc, #40]	@ (8008484 <prvAddCurrentTaskToDelayedList+0x94>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3304      	adds	r3, #4
 8008460:	4619      	mov	r1, r3
 8008462:	4610      	mov	r0, r2
 8008464:	f7fe fb81 	bl	8006b6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008468:	4b0a      	ldr	r3, [pc, #40]	@ (8008494 <prvAddCurrentTaskToDelayedList+0xa4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	d202      	bcs.n	8008478 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008472:	4a08      	ldr	r2, [pc, #32]	@ (8008494 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	6013      	str	r3, [r2, #0]
}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20001078 	.word	0x20001078
 8008484:	20000ba0 	.word	0x20000ba0
 8008488:	20001060 	.word	0x20001060
 800848c:	20001030 	.word	0x20001030
 8008490:	2000102c 	.word	0x2000102c
 8008494:	20001094 	.word	0x20001094

08008498 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	@ 0x28
 800849c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084a2:	f000 fb13 	bl	8008acc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084a6:	4b1d      	ldr	r3, [pc, #116]	@ (800851c <xTimerCreateTimerTask+0x84>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d021      	beq.n	80084f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084b6:	1d3a      	adds	r2, r7, #4
 80084b8:	f107 0108 	add.w	r1, r7, #8
 80084bc:	f107 030c 	add.w	r3, r7, #12
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fe fae7 	bl	8006a94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	9202      	str	r2, [sp, #8]
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	2302      	movs	r3, #2
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	460a      	mov	r2, r1
 80084d8:	4911      	ldr	r1, [pc, #68]	@ (8008520 <xTimerCreateTimerTask+0x88>)
 80084da:	4812      	ldr	r0, [pc, #72]	@ (8008524 <xTimerCreateTimerTask+0x8c>)
 80084dc:	f7ff f8a2 	bl	8007624 <xTaskCreateStatic>
 80084e0:	4603      	mov	r3, r0
 80084e2:	4a11      	ldr	r2, [pc, #68]	@ (8008528 <xTimerCreateTimerTask+0x90>)
 80084e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084e6:	4b10      	ldr	r3, [pc, #64]	@ (8008528 <xTimerCreateTimerTask+0x90>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084ee:	2301      	movs	r3, #1
 80084f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10b      	bne.n	8008510 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	613b      	str	r3, [r7, #16]
}
 800850a:	bf00      	nop
 800850c:	bf00      	nop
 800850e:	e7fd      	b.n	800850c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008510:	697b      	ldr	r3, [r7, #20]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	200010d0 	.word	0x200010d0
 8008520:	080095f0 	.word	0x080095f0
 8008524:	08008665 	.word	0x08008665
 8008528:	200010d4 	.word	0x200010d4

0800852c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	@ 0x28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800853a:	2300      	movs	r3, #0
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10b      	bne.n	800855c <xTimerGenericCommand+0x30>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	623b      	str	r3, [r7, #32]
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800855c:	4b19      	ldr	r3, [pc, #100]	@ (80085c4 <xTimerGenericCommand+0x98>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02a      	beq.n	80085ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b05      	cmp	r3, #5
 8008574:	dc18      	bgt.n	80085a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008576:	f7ff fead 	bl	80082d4 <xTaskGetSchedulerState>
 800857a:	4603      	mov	r3, r0
 800857c:	2b02      	cmp	r3, #2
 800857e:	d109      	bne.n	8008594 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008580:	4b10      	ldr	r3, [pc, #64]	@ (80085c4 <xTimerGenericCommand+0x98>)
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	f107 0110 	add.w	r1, r7, #16
 8008588:	2300      	movs	r3, #0
 800858a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800858c:	f7fe fc5a 	bl	8006e44 <xQueueGenericSend>
 8008590:	6278      	str	r0, [r7, #36]	@ 0x24
 8008592:	e012      	b.n	80085ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008594:	4b0b      	ldr	r3, [pc, #44]	@ (80085c4 <xTimerGenericCommand+0x98>)
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	f107 0110 	add.w	r1, r7, #16
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	f7fe fc50 	bl	8006e44 <xQueueGenericSend>
 80085a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80085a6:	e008      	b.n	80085ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085a8:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <xTimerGenericCommand+0x98>)
 80085aa:	6818      	ldr	r0, [r3, #0]
 80085ac:	f107 0110 	add.w	r1, r7, #16
 80085b0:	2300      	movs	r3, #0
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	f7fe fd48 	bl	8007048 <xQueueGenericSendFromISR>
 80085b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3728      	adds	r7, #40	@ 0x28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200010d0 	.word	0x200010d0

080085c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d2:	4b23      	ldr	r3, [pc, #140]	@ (8008660 <prvProcessExpiredTimer+0x98>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fafb 	bl	8006bdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d023      	beq.n	800863c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	18d1      	adds	r1, r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	6978      	ldr	r0, [r7, #20]
 8008602:	f000 f8d5 	bl	80087b0 <prvInsertTimerInActiveList>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d020      	beq.n	800864e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800860c:	2300      	movs	r3, #0
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	2300      	movs	r3, #0
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	2100      	movs	r1, #0
 8008616:	6978      	ldr	r0, [r7, #20]
 8008618:	f7ff ff88 	bl	800852c <xTimerGenericCommand>
 800861c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d114      	bne.n	800864e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008642:	f023 0301 	bic.w	r3, r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	6978      	ldr	r0, [r7, #20]
 8008654:	4798      	blx	r3
}
 8008656:	bf00      	nop
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200010c8 	.word	0x200010c8

08008664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800866c:	f107 0308 	add.w	r3, r7, #8
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f859 	bl	8008728 <prvGetNextExpireTime>
 8008676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4619      	mov	r1, r3
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f805 	bl	800868c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008682:	f000 f8d7 	bl	8008834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008686:	bf00      	nop
 8008688:	e7f0      	b.n	800866c <prvTimerTask+0x8>
	...

0800868c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008696:	f7ff fa29 	bl	8007aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f866 	bl	8008770 <prvSampleTimeNow>
 80086a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d130      	bne.n	800870e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <prvProcessTimerOrBlockTask+0x3c>
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d806      	bhi.n	80086c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086ba:	f7ff fa25 	bl	8007b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff81 	bl	80085c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086c6:	e024      	b.n	8008712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d008      	beq.n	80086e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086ce:	4b13      	ldr	r3, [pc, #76]	@ (800871c <prvProcessTimerOrBlockTask+0x90>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <prvProcessTimerOrBlockTask+0x50>
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <prvProcessTimerOrBlockTask+0x52>
 80086dc:	2300      	movs	r3, #0
 80086de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008720 <prvProcessTimerOrBlockTask+0x94>)
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	4619      	mov	r1, r3
 80086ee:	f7fe ff65 	bl	80075bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086f2:	f7ff fa09 	bl	8007b08 <xTaskResumeAll>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086fc:	4b09      	ldr	r3, [pc, #36]	@ (8008724 <prvProcessTimerOrBlockTask+0x98>)
 80086fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	f3bf 8f6f 	isb	sy
}
 800870c:	e001      	b.n	8008712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800870e:	f7ff f9fb 	bl	8007b08 <xTaskResumeAll>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200010cc 	.word	0x200010cc
 8008720:	200010d0 	.word	0x200010d0
 8008724:	e000ed04 	.word	0xe000ed04

08008728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008730:	4b0e      	ldr	r3, [pc, #56]	@ (800876c <prvGetNextExpireTime+0x44>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <prvGetNextExpireTime+0x16>
 800873a:	2201      	movs	r2, #1
 800873c:	e000      	b.n	8008740 <prvGetNextExpireTime+0x18>
 800873e:	2200      	movs	r2, #0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800874c:	4b07      	ldr	r3, [pc, #28]	@ (800876c <prvGetNextExpireTime+0x44>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	e001      	b.n	800875c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	200010c8 	.word	0x200010c8

08008770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008778:	f7ff fa64 	bl	8007c44 <xTaskGetTickCount>
 800877c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800877e:	4b0b      	ldr	r3, [pc, #44]	@ (80087ac <prvSampleTimeNow+0x3c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	429a      	cmp	r2, r3
 8008786:	d205      	bcs.n	8008794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008788:	f000 f93a 	bl	8008a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e002      	b.n	800879a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800879a:	4a04      	ldr	r2, [pc, #16]	@ (80087ac <prvSampleTimeNow+0x3c>)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087a0:	68fb      	ldr	r3, [r7, #12]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200010d8 	.word	0x200010d8

080087b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d812      	bhi.n	80087fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	1ad2      	subs	r2, r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d302      	bcc.n	80087ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087e4:	2301      	movs	r3, #1
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	e01b      	b.n	8008822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ea:	4b10      	ldr	r3, [pc, #64]	@ (800882c <prvInsertTimerInActiveList+0x7c>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7fe f9b8 	bl	8006b6a <vListInsert>
 80087fa:	e012      	b.n	8008822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d206      	bcs.n	8008812 <prvInsertTimerInActiveList+0x62>
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d302      	bcc.n	8008812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800880c:	2301      	movs	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e007      	b.n	8008822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008812:	4b07      	ldr	r3, [pc, #28]	@ (8008830 <prvInsertTimerInActiveList+0x80>)
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3304      	adds	r3, #4
 800881a:	4619      	mov	r1, r3
 800881c:	4610      	mov	r0, r2
 800881e:	f7fe f9a4 	bl	8006b6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008822:	697b      	ldr	r3, [r7, #20]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	200010cc 	.word	0x200010cc
 8008830:	200010c8 	.word	0x200010c8

08008834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08e      	sub	sp, #56	@ 0x38
 8008838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800883a:	e0ce      	b.n	80089da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	da19      	bge.n	8008876 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008842:	1d3b      	adds	r3, r7, #4
 8008844:	3304      	adds	r3, #4
 8008846:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	61fb      	str	r3, [r7, #28]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800886c:	6850      	ldr	r0, [r2, #4]
 800886e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008870:	6892      	ldr	r2, [r2, #8]
 8008872:	4611      	mov	r1, r2
 8008874:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f2c0 80ae 	blt.w	80089da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d004      	beq.n	8008894 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe f9a4 	bl	8006bdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008894:	463b      	mov	r3, r7
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff ff6a 	bl	8008770 <prvSampleTimeNow>
 800889c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b09      	cmp	r3, #9
 80088a2:	f200 8097 	bhi.w	80089d4 <prvProcessReceivedCommands+0x1a0>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <prvProcessReceivedCommands+0x78>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088d5 	.word	0x080088d5
 80088b0:	080088d5 	.word	0x080088d5
 80088b4:	080088d5 	.word	0x080088d5
 80088b8:	0800894b 	.word	0x0800894b
 80088bc:	0800895f 	.word	0x0800895f
 80088c0:	080089ab 	.word	0x080089ab
 80088c4:	080088d5 	.word	0x080088d5
 80088c8:	080088d5 	.word	0x080088d5
 80088cc:	0800894b 	.word	0x0800894b
 80088d0:	0800895f 	.word	0x0800895f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088da:	f043 0301 	orr.w	r3, r3, #1
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	18d1      	adds	r1, r2, r3
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f4:	f7ff ff5c 	bl	80087b0 <prvInsertTimerInActiveList>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d06c      	beq.n	80089d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008904:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d061      	beq.n	80089d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	441a      	add	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	2300      	movs	r3, #0
 8008922:	2100      	movs	r1, #0
 8008924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008926:	f7ff fe01 	bl	800852c <xTimerGenericCommand>
 800892a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d152      	bne.n	80089d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	61bb      	str	r3, [r7, #24]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008950:	f023 0301 	bic.w	r3, r3, #1
 8008954:	b2da      	uxtb	r2, r3
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800895c:	e03d      	b.n	80089da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008964:	f043 0301 	orr.w	r3, r3, #1
 8008968:	b2da      	uxtb	r2, r3
 800896a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10b      	bne.n	8008996 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	617b      	str	r3, [r7, #20]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899c:	18d1      	adds	r1, r2, r3
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a4:	f7ff ff04 	bl	80087b0 <prvInsertTimerInActiveList>
					break;
 80089a8:	e017      	b.n	80089da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80089b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ba:	f000 fbe5 	bl	8009188 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089be:	e00c      	b.n	80089da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089d2:	e002      	b.n	80089da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80089d4:	bf00      	nop
 80089d6:	e000      	b.n	80089da <prvProcessReceivedCommands+0x1a6>
					break;
 80089d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089da:	4b08      	ldr	r3, [pc, #32]	@ (80089fc <prvProcessReceivedCommands+0x1c8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	1d39      	adds	r1, r7, #4
 80089e0:	2200      	movs	r2, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fbce 	bl	8007184 <xQueueReceive>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f47f af26 	bne.w	800883c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	3730      	adds	r7, #48	@ 0x30
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200010d0 	.word	0x200010d0

08008a00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a06:	e049      	b.n	8008a9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a08:	4b2e      	ldr	r3, [pc, #184]	@ (8008ac4 <prvSwitchTimerLists+0xc4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a12:	4b2c      	ldr	r3, [pc, #176]	@ (8008ac4 <prvSwitchTimerLists+0xc4>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe f8db 	bl	8006bdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d02f      	beq.n	8008a9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	4413      	add	r3, r2
 8008a44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d90e      	bls.n	8008a6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac4 <prvSwitchTimerLists+0xc4>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f7fe f880 	bl	8006b6a <vListInsert>
 8008a6a:	e017      	b.n	8008a9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	2300      	movs	r3, #0
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	2100      	movs	r1, #0
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7ff fd58 	bl	800852c <xTimerGenericCommand>
 8008a7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	603b      	str	r3, [r7, #0]
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	e7fd      	b.n	8008a98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a9c:	4b09      	ldr	r3, [pc, #36]	@ (8008ac4 <prvSwitchTimerLists+0xc4>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1b0      	bne.n	8008a08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008aa6:	4b07      	ldr	r3, [pc, #28]	@ (8008ac4 <prvSwitchTimerLists+0xc4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008aac:	4b06      	ldr	r3, [pc, #24]	@ (8008ac8 <prvSwitchTimerLists+0xc8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a04      	ldr	r2, [pc, #16]	@ (8008ac4 <prvSwitchTimerLists+0xc4>)
 8008ab2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ab4:	4a04      	ldr	r2, [pc, #16]	@ (8008ac8 <prvSwitchTimerLists+0xc8>)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	6013      	str	r3, [r2, #0]
}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200010c8 	.word	0x200010c8
 8008ac8:	200010cc 	.word	0x200010cc

08008acc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ad2:	f000 f969 	bl	8008da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ad6:	4b15      	ldr	r3, [pc, #84]	@ (8008b2c <prvCheckForValidListAndQueue+0x60>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d120      	bne.n	8008b20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ade:	4814      	ldr	r0, [pc, #80]	@ (8008b30 <prvCheckForValidListAndQueue+0x64>)
 8008ae0:	f7fd fff2 	bl	8006ac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ae4:	4813      	ldr	r0, [pc, #76]	@ (8008b34 <prvCheckForValidListAndQueue+0x68>)
 8008ae6:	f7fd ffef 	bl	8006ac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aea:	4b13      	ldr	r3, [pc, #76]	@ (8008b38 <prvCheckForValidListAndQueue+0x6c>)
 8008aec:	4a10      	ldr	r2, [pc, #64]	@ (8008b30 <prvCheckForValidListAndQueue+0x64>)
 8008aee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008af0:	4b12      	ldr	r3, [pc, #72]	@ (8008b3c <prvCheckForValidListAndQueue+0x70>)
 8008af2:	4a10      	ldr	r2, [pc, #64]	@ (8008b34 <prvCheckForValidListAndQueue+0x68>)
 8008af4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008af6:	2300      	movs	r3, #0
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	4b11      	ldr	r3, [pc, #68]	@ (8008b40 <prvCheckForValidListAndQueue+0x74>)
 8008afc:	4a11      	ldr	r2, [pc, #68]	@ (8008b44 <prvCheckForValidListAndQueue+0x78>)
 8008afe:	2110      	movs	r1, #16
 8008b00:	200a      	movs	r0, #10
 8008b02:	f7fe f8ff 	bl	8006d04 <xQueueGenericCreateStatic>
 8008b06:	4603      	mov	r3, r0
 8008b08:	4a08      	ldr	r2, [pc, #32]	@ (8008b2c <prvCheckForValidListAndQueue+0x60>)
 8008b0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b0c:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <prvCheckForValidListAndQueue+0x60>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b14:	4b05      	ldr	r3, [pc, #20]	@ (8008b2c <prvCheckForValidListAndQueue+0x60>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	490b      	ldr	r1, [pc, #44]	@ (8008b48 <prvCheckForValidListAndQueue+0x7c>)
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fd24 	bl	8007568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b20:	f000 f974 	bl	8008e0c <vPortExitCritical>
}
 8008b24:	bf00      	nop
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200010d0 	.word	0x200010d0
 8008b30:	200010a0 	.word	0x200010a0
 8008b34:	200010b4 	.word	0x200010b4
 8008b38:	200010c8 	.word	0x200010c8
 8008b3c:	200010cc 	.word	0x200010cc
 8008b40:	2000117c 	.word	0x2000117c
 8008b44:	200010dc 	.word	0x200010dc
 8008b48:	080095f8 	.word	0x080095f8

08008b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3b04      	subs	r3, #4
 8008b5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3b04      	subs	r3, #4
 8008b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f023 0201 	bic.w	r2, r3, #1
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb0 <pxPortInitialiseStack+0x64>)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b14      	subs	r3, #20
 8008b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3b04      	subs	r3, #4
 8008b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f06f 0202 	mvn.w	r2, #2
 8008b9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3b20      	subs	r3, #32
 8008ba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	08008bb5 	.word	0x08008bb5

08008bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bbe:	4b13      	ldr	r3, [pc, #76]	@ (8008c0c <prvTaskExitError+0x58>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d00b      	beq.n	8008be0 <prvTaskExitError+0x2c>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	60fb      	str	r3, [r7, #12]
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <prvTaskExitError+0x28>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60bb      	str	r3, [r7, #8]
}
 8008bf2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bf4:	bf00      	nop
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0fc      	beq.n	8008bf6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	2000000c 	.word	0x2000000c

08008c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <pxCurrentTCBConst2>)
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	6808      	ldr	r0, [r1, #0]
 8008c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f380 8809 	msr	PSP, r0
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	4770      	bx	lr
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst2>:
 8008c30:	20000ba0 	.word	0x20000ba0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c38:	4808      	ldr	r0, [pc, #32]	@ (8008c5c <prvPortStartFirstTask+0x24>)
 8008c3a:	6800      	ldr	r0, [r0, #0]
 8008c3c:	6800      	ldr	r0, [r0, #0]
 8008c3e:	f380 8808 	msr	MSP, r0
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8814 	msr	CONTROL, r0
 8008c4a:	b662      	cpsie	i
 8008c4c:	b661      	cpsie	f
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	df00      	svc	0
 8008c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c5a:	bf00      	nop
 8008c5c:	e000ed08 	.word	0xe000ed08

08008c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c66:	4b47      	ldr	r3, [pc, #284]	@ (8008d84 <xPortStartScheduler+0x124>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a47      	ldr	r2, [pc, #284]	@ (8008d88 <xPortStartScheduler+0x128>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10b      	bne.n	8008c88 <xPortStartScheduler+0x28>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c88:	4b3e      	ldr	r3, [pc, #248]	@ (8008d84 <xPortStartScheduler+0x124>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d8c <xPortStartScheduler+0x12c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d10b      	bne.n	8008caa <xPortStartScheduler+0x4a>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60fb      	str	r3, [r7, #12]
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	e7fd      	b.n	8008ca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008caa:	4b39      	ldr	r3, [pc, #228]	@ (8008d90 <xPortStartScheduler+0x130>)
 8008cac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	22ff      	movs	r2, #255	@ 0xff
 8008cba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	4b31      	ldr	r3, [pc, #196]	@ (8008d94 <xPortStartScheduler+0x134>)
 8008cd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cd2:	4b31      	ldr	r3, [pc, #196]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cd8:	e009      	b.n	8008cee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008cda:	4b2f      	ldr	r3, [pc, #188]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008ce2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cf6:	2b80      	cmp	r3, #128	@ 0x80
 8008cf8:	d0ef      	beq.n	8008cda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cfa:	4b27      	ldr	r3, [pc, #156]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f1c3 0307 	rsb	r3, r3, #7
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d00b      	beq.n	8008d1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	60bb      	str	r3, [r7, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	4a1c      	ldr	r2, [pc, #112]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d28:	4b1b      	ldr	r3, [pc, #108]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d30:	4a19      	ldr	r2, [pc, #100]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d3c:	4b17      	ldr	r3, [pc, #92]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d48:	4b14      	ldr	r3, [pc, #80]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a13      	ldr	r2, [pc, #76]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d54:	f000 f8da 	bl	8008f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d58:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <xPortStartScheduler+0x140>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d5e:	f000 f8f9 	bl	8008f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d62:	4b10      	ldr	r3, [pc, #64]	@ (8008da4 <xPortStartScheduler+0x144>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a0f      	ldr	r2, [pc, #60]	@ (8008da4 <xPortStartScheduler+0x144>)
 8008d68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d6e:	f7ff ff63 	bl	8008c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d72:	f7ff f831 	bl	8007dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8008d76:	f7ff ff1d 	bl	8008bb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	e000ed00 	.word	0xe000ed00
 8008d88:	410fc271 	.word	0x410fc271
 8008d8c:	410fc270 	.word	0x410fc270
 8008d90:	e000e400 	.word	0xe000e400
 8008d94:	200011cc 	.word	0x200011cc
 8008d98:	200011d0 	.word	0x200011d0
 8008d9c:	e000ed20 	.word	0xe000ed20
 8008da0:	2000000c 	.word	0x2000000c
 8008da4:	e000ef34 	.word	0xe000ef34

08008da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <vPortEnterCritical+0x5c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8008e04 <vPortEnterCritical+0x5c>)
 8008dca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <vPortEnterCritical+0x5c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d110      	bne.n	8008df6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <vPortEnterCritical+0x60>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00b      	beq.n	8008df6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	603b      	str	r3, [r7, #0]
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	e7fd      	b.n	8008df2 <vPortEnterCritical+0x4a>
	}
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	2000000c 	.word	0x2000000c
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e12:	4b12      	ldr	r3, [pc, #72]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <vPortExitCritical+0x26>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	607b      	str	r3, [r7, #4]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e32:	4b0a      	ldr	r3, [pc, #40]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	4a08      	ldr	r2, [pc, #32]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e3c:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <vPortExitCritical+0x44>
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	2000000c 	.word	0x2000000c

08008e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e60:	f3ef 8009 	mrs	r0, PSP
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	4b15      	ldr	r3, [pc, #84]	@ (8008ec0 <pxCurrentTCBConst>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	f01e 0f10 	tst.w	lr, #16
 8008e70:	bf08      	it	eq
 8008e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7a:	6010      	str	r0, [r2, #0]
 8008e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e84:	f380 8811 	msr	BASEPRI, r0
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f7fe ffa2 	bl	8007dd8 <vTaskSwitchContext>
 8008e94:	f04f 0000 	mov.w	r0, #0
 8008e98:	f380 8811 	msr	BASEPRI, r0
 8008e9c:	bc09      	pop	{r0, r3}
 8008e9e:	6819      	ldr	r1, [r3, #0]
 8008ea0:	6808      	ldr	r0, [r1, #0]
 8008ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea6:	f01e 0f10 	tst.w	lr, #16
 8008eaa:	bf08      	it	eq
 8008eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008eb0:	f380 8809 	msr	PSP, r0
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w

08008ec0 <pxCurrentTCBConst>:
 8008ec0:	20000ba0 	.word	0x20000ba0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop

08008ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	607b      	str	r3, [r7, #4]
}
 8008ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ee2:	f7fe febf 	bl	8007c64 <xTaskIncrementTick>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eec:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <xPortSysTickHandler+0x40>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f383 8811 	msr	BASEPRI, r3
}
 8008efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f10:	4b0b      	ldr	r3, [pc, #44]	@ (8008f40 <vPortSetupTimerInterrupt+0x34>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <vPortSetupTimerInterrupt+0x38>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f48 <vPortSetupTimerInterrupt+0x3c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0a      	ldr	r2, [pc, #40]	@ (8008f4c <vPortSetupTimerInterrupt+0x40>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	099b      	lsrs	r3, r3, #6
 8008f28:	4a09      	ldr	r2, [pc, #36]	@ (8008f50 <vPortSetupTimerInterrupt+0x44>)
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f2e:	4b04      	ldr	r3, [pc, #16]	@ (8008f40 <vPortSetupTimerInterrupt+0x34>)
 8008f30:	2207      	movs	r2, #7
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	e000e010 	.word	0xe000e010
 8008f44:	e000e018 	.word	0xe000e018
 8008f48:	20000000 	.word	0x20000000
 8008f4c:	10624dd3 	.word	0x10624dd3
 8008f50:	e000e014 	.word	0xe000e014

08008f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f64 <vPortEnableVFP+0x10>
 8008f58:	6801      	ldr	r1, [r0, #0]
 8008f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f5e:	6001      	str	r1, [r0, #0]
 8008f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f62:	bf00      	nop
 8008f64:	e000ed88 	.word	0xe000ed88

08008f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f6e:	f3ef 8305 	mrs	r3, IPSR
 8008f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d915      	bls.n	8008fa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f7a:	4a18      	ldr	r2, [pc, #96]	@ (8008fdc <vPortValidateInterruptPriority+0x74>)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f84:	4b16      	ldr	r3, [pc, #88]	@ (8008fe0 <vPortValidateInterruptPriority+0x78>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	7afa      	ldrb	r2, [r7, #11]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d20b      	bcs.n	8008fa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	e7fd      	b.n	8008fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe4 <vPortValidateInterruptPriority+0x7c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fae:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <vPortValidateInterruptPriority+0x80>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d90b      	bls.n	8008fce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	603b      	str	r3, [r7, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vPortValidateInterruptPriority+0x62>
	}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	e000e3f0 	.word	0xe000e3f0
 8008fe0:	200011cc 	.word	0x200011cc
 8008fe4:	e000ed0c 	.word	0xe000ed0c
 8008fe8:	200011d0 	.word	0x200011d0

08008fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	@ 0x28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ff8:	f7fe fd78 	bl	8007aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8009170 <pvPortMalloc+0x184>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009004:	f000 f924 	bl	8009250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009008:	4b5a      	ldr	r3, [pc, #360]	@ (8009174 <pvPortMalloc+0x188>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4013      	ands	r3, r2
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 8095 	bne.w	8009140 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01e      	beq.n	800905a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800901c:	2208      	movs	r2, #8
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	2b00      	cmp	r3, #0
 800902c:	d015      	beq.n	800905a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f023 0307 	bic.w	r3, r3, #7
 8009034:	3308      	adds	r3, #8
 8009036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <pvPortMalloc+0x6e>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	617b      	str	r3, [r7, #20]
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d06f      	beq.n	8009140 <pvPortMalloc+0x154>
 8009060:	4b45      	ldr	r3, [pc, #276]	@ (8009178 <pvPortMalloc+0x18c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	429a      	cmp	r2, r3
 8009068:	d86a      	bhi.n	8009140 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800906a:	4b44      	ldr	r3, [pc, #272]	@ (800917c <pvPortMalloc+0x190>)
 800906c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800906e:	4b43      	ldr	r3, [pc, #268]	@ (800917c <pvPortMalloc+0x190>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009074:	e004      	b.n	8009080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	429a      	cmp	r2, r3
 8009088:	d903      	bls.n	8009092 <pvPortMalloc+0xa6>
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1f1      	bne.n	8009076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009092:	4b37      	ldr	r3, [pc, #220]	@ (8009170 <pvPortMalloc+0x184>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009098:	429a      	cmp	r2, r3
 800909a:	d051      	beq.n	8009140 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2208      	movs	r2, #8
 80090a2:	4413      	add	r3, r2
 80090a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	1ad2      	subs	r2, r2, r3
 80090b6:	2308      	movs	r3, #8
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d920      	bls.n	8009100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4413      	add	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <pvPortMalloc+0xfc>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	613b      	str	r3, [r7, #16]
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	e7fd      	b.n	80090e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090fa:	69b8      	ldr	r0, [r7, #24]
 80090fc:	f000 f90a 	bl	8009314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009100:	4b1d      	ldr	r3, [pc, #116]	@ (8009178 <pvPortMalloc+0x18c>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	4a1b      	ldr	r2, [pc, #108]	@ (8009178 <pvPortMalloc+0x18c>)
 800910c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800910e:	4b1a      	ldr	r3, [pc, #104]	@ (8009178 <pvPortMalloc+0x18c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b1b      	ldr	r3, [pc, #108]	@ (8009180 <pvPortMalloc+0x194>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d203      	bcs.n	8009122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800911a:	4b17      	ldr	r3, [pc, #92]	@ (8009178 <pvPortMalloc+0x18c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a18      	ldr	r2, [pc, #96]	@ (8009180 <pvPortMalloc+0x194>)
 8009120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	4b13      	ldr	r3, [pc, #76]	@ (8009174 <pvPortMalloc+0x188>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	431a      	orrs	r2, r3
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009136:	4b13      	ldr	r3, [pc, #76]	@ (8009184 <pvPortMalloc+0x198>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3301      	adds	r3, #1
 800913c:	4a11      	ldr	r2, [pc, #68]	@ (8009184 <pvPortMalloc+0x198>)
 800913e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009140:	f7fe fce2 	bl	8007b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <pvPortMalloc+0x17a>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	60fb      	str	r3, [r7, #12]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <pvPortMalloc+0x176>
	return pvReturn;
 8009166:	69fb      	ldr	r3, [r7, #28]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3728      	adds	r7, #40	@ 0x28
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20001ddc 	.word	0x20001ddc
 8009174:	20001df0 	.word	0x20001df0
 8009178:	20001de0 	.word	0x20001de0
 800917c:	20001dd4 	.word	0x20001dd4
 8009180:	20001de4 	.word	0x20001de4
 8009184:	20001de8 	.word	0x20001de8

08009188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d04f      	beq.n	800923a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800919a:	2308      	movs	r3, #8
 800919c:	425b      	negs	r3, r3
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4413      	add	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	4b25      	ldr	r3, [pc, #148]	@ (8009244 <vPortFree+0xbc>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4013      	ands	r3, r2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10b      	bne.n	80091ce <vPortFree+0x46>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	60fb      	str	r3, [r7, #12]
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	e7fd      	b.n	80091ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <vPortFree+0x66>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	60bb      	str	r3, [r7, #8]
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	e7fd      	b.n	80091ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	4b14      	ldr	r3, [pc, #80]	@ (8009244 <vPortFree+0xbc>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4013      	ands	r3, r2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01e      	beq.n	800923a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d11a      	bne.n	800923a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	4b0e      	ldr	r3, [pc, #56]	@ (8009244 <vPortFree+0xbc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	43db      	mvns	r3, r3
 800920e:	401a      	ands	r2, r3
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009214:	f7fe fc6a 	bl	8007aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <vPortFree+0xc0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4413      	add	r3, r2
 8009222:	4a09      	ldr	r2, [pc, #36]	@ (8009248 <vPortFree+0xc0>)
 8009224:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f000 f874 	bl	8009314 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800922c:	4b07      	ldr	r3, [pc, #28]	@ (800924c <vPortFree+0xc4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	4a06      	ldr	r2, [pc, #24]	@ (800924c <vPortFree+0xc4>)
 8009234:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009236:	f7fe fc67 	bl	8007b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800923a:	bf00      	nop
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20001df0 	.word	0x20001df0
 8009248:	20001de0 	.word	0x20001de0
 800924c:	20001dec 	.word	0x20001dec

08009250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009256:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800925a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800925c:	4b27      	ldr	r3, [pc, #156]	@ (80092fc <prvHeapInit+0xac>)
 800925e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00c      	beq.n	8009284 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3307      	adds	r3, #7
 800926e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0307 	bic.w	r3, r3, #7
 8009276:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	4a1f      	ldr	r2, [pc, #124]	@ (80092fc <prvHeapInit+0xac>)
 8009280:	4413      	add	r3, r2
 8009282:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009288:	4a1d      	ldr	r2, [pc, #116]	@ (8009300 <prvHeapInit+0xb0>)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800928e:	4b1c      	ldr	r3, [pc, #112]	@ (8009300 <prvHeapInit+0xb0>)
 8009290:	2200      	movs	r2, #0
 8009292:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	4413      	add	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800929c:	2208      	movs	r2, #8
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a15      	ldr	r2, [pc, #84]	@ (8009304 <prvHeapInit+0xb4>)
 80092b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092b2:	4b14      	ldr	r3, [pc, #80]	@ (8009304 <prvHeapInit+0xb4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ba:	4b12      	ldr	r3, [pc, #72]	@ (8009304 <prvHeapInit+0xb4>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009304 <prvHeapInit+0xb4>)
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009308 <prvHeapInit+0xb8>)
 80092de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a09      	ldr	r2, [pc, #36]	@ (800930c <prvHeapInit+0xbc>)
 80092e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092e8:	4b09      	ldr	r3, [pc, #36]	@ (8009310 <prvHeapInit+0xc0>)
 80092ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092ee:	601a      	str	r2, [r3, #0]
}
 80092f0:	bf00      	nop
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	200011d4 	.word	0x200011d4
 8009300:	20001dd4 	.word	0x20001dd4
 8009304:	20001ddc 	.word	0x20001ddc
 8009308:	20001de4 	.word	0x20001de4
 800930c:	20001de0 	.word	0x20001de0
 8009310:	20001df0 	.word	0x20001df0

08009314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800931c:	4b28      	ldr	r3, [pc, #160]	@ (80093c0 <prvInsertBlockIntoFreeList+0xac>)
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e002      	b.n	8009328 <prvInsertBlockIntoFreeList+0x14>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	429a      	cmp	r2, r3
 8009330:	d8f7      	bhi.n	8009322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	4413      	add	r3, r2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	429a      	cmp	r2, r3
 8009342:	d108      	bne.n	8009356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	441a      	add	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	441a      	add	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d118      	bne.n	800939c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b15      	ldr	r3, [pc, #84]	@ (80093c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d00d      	beq.n	8009392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	441a      	add	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	e008      	b.n	80093a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009392:	4b0c      	ldr	r3, [pc, #48]	@ (80093c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	e003      	b.n	80093a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d002      	beq.n	80093b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b2:	bf00      	nop
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	20001dd4 	.word	0x20001dd4
 80093c4:	20001ddc 	.word	0x20001ddc

080093c8 <memset>:
 80093c8:	4402      	add	r2, r0
 80093ca:	4603      	mov	r3, r0
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d100      	bne.n	80093d2 <memset+0xa>
 80093d0:	4770      	bx	lr
 80093d2:	f803 1b01 	strb.w	r1, [r3], #1
 80093d6:	e7f9      	b.n	80093cc <memset+0x4>

080093d8 <_reclaim_reent>:
 80093d8:	4b29      	ldr	r3, [pc, #164]	@ (8009480 <_reclaim_reent+0xa8>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4283      	cmp	r3, r0
 80093de:	b570      	push	{r4, r5, r6, lr}
 80093e0:	4604      	mov	r4, r0
 80093e2:	d04b      	beq.n	800947c <_reclaim_reent+0xa4>
 80093e4:	69c3      	ldr	r3, [r0, #28]
 80093e6:	b1ab      	cbz	r3, 8009414 <_reclaim_reent+0x3c>
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	b16b      	cbz	r3, 8009408 <_reclaim_reent+0x30>
 80093ec:	2500      	movs	r5, #0
 80093ee:	69e3      	ldr	r3, [r4, #28]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	5959      	ldr	r1, [r3, r5]
 80093f4:	2900      	cmp	r1, #0
 80093f6:	d13b      	bne.n	8009470 <_reclaim_reent+0x98>
 80093f8:	3504      	adds	r5, #4
 80093fa:	2d80      	cmp	r5, #128	@ 0x80
 80093fc:	d1f7      	bne.n	80093ee <_reclaim_reent+0x16>
 80093fe:	69e3      	ldr	r3, [r4, #28]
 8009400:	4620      	mov	r0, r4
 8009402:	68d9      	ldr	r1, [r3, #12]
 8009404:	f000 f872 	bl	80094ec <_free_r>
 8009408:	69e3      	ldr	r3, [r4, #28]
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	b111      	cbz	r1, 8009414 <_reclaim_reent+0x3c>
 800940e:	4620      	mov	r0, r4
 8009410:	f000 f86c 	bl	80094ec <_free_r>
 8009414:	6961      	ldr	r1, [r4, #20]
 8009416:	b111      	cbz	r1, 800941e <_reclaim_reent+0x46>
 8009418:	4620      	mov	r0, r4
 800941a:	f000 f867 	bl	80094ec <_free_r>
 800941e:	69e1      	ldr	r1, [r4, #28]
 8009420:	b111      	cbz	r1, 8009428 <_reclaim_reent+0x50>
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f862 	bl	80094ec <_free_r>
 8009428:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800942a:	b111      	cbz	r1, 8009432 <_reclaim_reent+0x5a>
 800942c:	4620      	mov	r0, r4
 800942e:	f000 f85d 	bl	80094ec <_free_r>
 8009432:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009434:	b111      	cbz	r1, 800943c <_reclaim_reent+0x64>
 8009436:	4620      	mov	r0, r4
 8009438:	f000 f858 	bl	80094ec <_free_r>
 800943c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800943e:	b111      	cbz	r1, 8009446 <_reclaim_reent+0x6e>
 8009440:	4620      	mov	r0, r4
 8009442:	f000 f853 	bl	80094ec <_free_r>
 8009446:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009448:	b111      	cbz	r1, 8009450 <_reclaim_reent+0x78>
 800944a:	4620      	mov	r0, r4
 800944c:	f000 f84e 	bl	80094ec <_free_r>
 8009450:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009452:	b111      	cbz	r1, 800945a <_reclaim_reent+0x82>
 8009454:	4620      	mov	r0, r4
 8009456:	f000 f849 	bl	80094ec <_free_r>
 800945a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800945c:	b111      	cbz	r1, 8009464 <_reclaim_reent+0x8c>
 800945e:	4620      	mov	r0, r4
 8009460:	f000 f844 	bl	80094ec <_free_r>
 8009464:	6a23      	ldr	r3, [r4, #32]
 8009466:	b14b      	cbz	r3, 800947c <_reclaim_reent+0xa4>
 8009468:	4620      	mov	r0, r4
 800946a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800946e:	4718      	bx	r3
 8009470:	680e      	ldr	r6, [r1, #0]
 8009472:	4620      	mov	r0, r4
 8009474:	f000 f83a 	bl	80094ec <_free_r>
 8009478:	4631      	mov	r1, r6
 800947a:	e7bb      	b.n	80093f4 <_reclaim_reent+0x1c>
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	bf00      	nop
 8009480:	20000010 	.word	0x20000010

08009484 <__libc_init_array>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4d0d      	ldr	r5, [pc, #52]	@ (80094bc <__libc_init_array+0x38>)
 8009488:	4c0d      	ldr	r4, [pc, #52]	@ (80094c0 <__libc_init_array+0x3c>)
 800948a:	1b64      	subs	r4, r4, r5
 800948c:	10a4      	asrs	r4, r4, #2
 800948e:	2600      	movs	r6, #0
 8009490:	42a6      	cmp	r6, r4
 8009492:	d109      	bne.n	80094a8 <__libc_init_array+0x24>
 8009494:	4d0b      	ldr	r5, [pc, #44]	@ (80094c4 <__libc_init_array+0x40>)
 8009496:	4c0c      	ldr	r4, [pc, #48]	@ (80094c8 <__libc_init_array+0x44>)
 8009498:	f000 f87e 	bl	8009598 <_init>
 800949c:	1b64      	subs	r4, r4, r5
 800949e:	10a4      	asrs	r4, r4, #2
 80094a0:	2600      	movs	r6, #0
 80094a2:	42a6      	cmp	r6, r4
 80094a4:	d105      	bne.n	80094b2 <__libc_init_array+0x2e>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ac:	4798      	blx	r3
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7ee      	b.n	8009490 <__libc_init_array+0xc>
 80094b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b6:	4798      	blx	r3
 80094b8:	3601      	adds	r6, #1
 80094ba:	e7f2      	b.n	80094a2 <__libc_init_array+0x1e>
 80094bc:	080096a8 	.word	0x080096a8
 80094c0:	080096a8 	.word	0x080096a8
 80094c4:	080096a8 	.word	0x080096a8
 80094c8:	080096ac 	.word	0x080096ac

080094cc <__retarget_lock_acquire_recursive>:
 80094cc:	4770      	bx	lr

080094ce <__retarget_lock_release_recursive>:
 80094ce:	4770      	bx	lr

080094d0 <memcpy>:
 80094d0:	440a      	add	r2, r1
 80094d2:	4291      	cmp	r1, r2
 80094d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094d8:	d100      	bne.n	80094dc <memcpy+0xc>
 80094da:	4770      	bx	lr
 80094dc:	b510      	push	{r4, lr}
 80094de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094e6:	4291      	cmp	r1, r2
 80094e8:	d1f9      	bne.n	80094de <memcpy+0xe>
 80094ea:	bd10      	pop	{r4, pc}

080094ec <_free_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4605      	mov	r5, r0
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d041      	beq.n	8009578 <_free_r+0x8c>
 80094f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f8:	1f0c      	subs	r4, r1, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	bfb8      	it	lt
 80094fe:	18e4      	addlt	r4, r4, r3
 8009500:	f000 f83e 	bl	8009580 <__malloc_lock>
 8009504:	4a1d      	ldr	r2, [pc, #116]	@ (800957c <_free_r+0x90>)
 8009506:	6813      	ldr	r3, [r2, #0]
 8009508:	b933      	cbnz	r3, 8009518 <_free_r+0x2c>
 800950a:	6063      	str	r3, [r4, #4]
 800950c:	6014      	str	r4, [r2, #0]
 800950e:	4628      	mov	r0, r5
 8009510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009514:	f000 b83a 	b.w	800958c <__malloc_unlock>
 8009518:	42a3      	cmp	r3, r4
 800951a:	d908      	bls.n	800952e <_free_r+0x42>
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	1821      	adds	r1, r4, r0
 8009520:	428b      	cmp	r3, r1
 8009522:	bf01      	itttt	eq
 8009524:	6819      	ldreq	r1, [r3, #0]
 8009526:	685b      	ldreq	r3, [r3, #4]
 8009528:	1809      	addeq	r1, r1, r0
 800952a:	6021      	streq	r1, [r4, #0]
 800952c:	e7ed      	b.n	800950a <_free_r+0x1e>
 800952e:	461a      	mov	r2, r3
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b10b      	cbz	r3, 8009538 <_free_r+0x4c>
 8009534:	42a3      	cmp	r3, r4
 8009536:	d9fa      	bls.n	800952e <_free_r+0x42>
 8009538:	6811      	ldr	r1, [r2, #0]
 800953a:	1850      	adds	r0, r2, r1
 800953c:	42a0      	cmp	r0, r4
 800953e:	d10b      	bne.n	8009558 <_free_r+0x6c>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	4401      	add	r1, r0
 8009544:	1850      	adds	r0, r2, r1
 8009546:	4283      	cmp	r3, r0
 8009548:	6011      	str	r1, [r2, #0]
 800954a:	d1e0      	bne.n	800950e <_free_r+0x22>
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	6053      	str	r3, [r2, #4]
 8009552:	4408      	add	r0, r1
 8009554:	6010      	str	r0, [r2, #0]
 8009556:	e7da      	b.n	800950e <_free_r+0x22>
 8009558:	d902      	bls.n	8009560 <_free_r+0x74>
 800955a:	230c      	movs	r3, #12
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	e7d6      	b.n	800950e <_free_r+0x22>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	1821      	adds	r1, r4, r0
 8009564:	428b      	cmp	r3, r1
 8009566:	bf04      	itt	eq
 8009568:	6819      	ldreq	r1, [r3, #0]
 800956a:	685b      	ldreq	r3, [r3, #4]
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	bf04      	itt	eq
 8009570:	1809      	addeq	r1, r1, r0
 8009572:	6021      	streq	r1, [r4, #0]
 8009574:	6054      	str	r4, [r2, #4]
 8009576:	e7ca      	b.n	800950e <_free_r+0x22>
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	20001f30 	.word	0x20001f30

08009580 <__malloc_lock>:
 8009580:	4801      	ldr	r0, [pc, #4]	@ (8009588 <__malloc_lock+0x8>)
 8009582:	f7ff bfa3 	b.w	80094cc <__retarget_lock_acquire_recursive>
 8009586:	bf00      	nop
 8009588:	20001f2c 	.word	0x20001f2c

0800958c <__malloc_unlock>:
 800958c:	4801      	ldr	r0, [pc, #4]	@ (8009594 <__malloc_unlock+0x8>)
 800958e:	f7ff bf9e 	b.w	80094ce <__retarget_lock_release_recursive>
 8009592:	bf00      	nop
 8009594:	20001f2c 	.word	0x20001f2c

08009598 <_init>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	bf00      	nop
 800959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959e:	bc08      	pop	{r3}
 80095a0:	469e      	mov	lr, r3
 80095a2:	4770      	bx	lr

080095a4 <_fini>:
 80095a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a6:	bf00      	nop
 80095a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095aa:	bc08      	pop	{r3}
 80095ac:	469e      	mov	lr, r3
 80095ae:	4770      	bx	lr
